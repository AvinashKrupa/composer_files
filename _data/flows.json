[
    {
        "id": "5a0bbc7a3cc218b6",
        "type": "tab",
        "label": "Master",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a28b40984e94e443",
        "type": "tab",
        "label": "Vendure (Ray Ban)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b607acf4f7979f06",
        "type": "tab",
        "label": "CMS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "13b0744d8112940c",
        "type": "tab",
        "label": "Typesense",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "3da6343a79b654c4",
        "type": "tab",
        "label": "Stripe",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e460c767811fd1fc",
        "type": "tab",
        "label": "Algolia",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b6e6b6bb6c12b1cb",
        "type": "subflow",
        "name": "Strapi",
        "info": "",
        "category": "CMS",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "8c96e576e5ff0269"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "icon": "node-red-contrib-lowercase/strapi.png"
    },
    {
        "id": "f741b4a71ba8af42",
        "type": "subflow",
        "name": "Marello",
        "info": "",
        "category": "OMS",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#90EE90",
        "icon": "node-red-contrib-lowercase/marello.png"
    },
    {
        "id": "8269f83d98cc79b2",
        "type": "subflow",
        "name": "Stripe",
        "info": "",
        "category": "Payment Gateway",
        "in": [
            {
                "x": 80,
                "y": 120,
                "wires": [
                    {
                        "id": "aaa91371bde55be2"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#C3B1E1",
        "icon": "node-red-contrib-lowercase/stripe.png"
    },
    {
        "id": "83648f5afb39c5ba",
        "type": "subflow",
        "name": "PIMCore",
        "info": "",
        "category": "Product Information Management",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#6495ED",
        "icon": "node-red-contrib-lowercase/pim.png"
    },
    {
        "id": "9bce73fe20ce005e",
        "type": "subflow",
        "name": "Algolia",
        "info": "",
        "category": "Search",
        "in": [
            {
                "x": 80,
                "y": 40,
                "wires": [
                    {
                        "id": "bea04daab10615ac"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#0096FF",
        "icon": "node-red-contrib-lowercase/algolia.png"
    },
    {
        "id": "319e0b6f91b1638f",
        "type": "subflow",
        "name": "Typesense",
        "info": "",
        "category": "Search",
        "in": [
            {
                "x": 160,
                "y": 140,
                "wires": [
                    {
                        "id": "c06ea0e725dc6275"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#FFF0F0",
        "icon": "node-red-contrib-lowercase/Typesense.png"
    },
    {
        "id": "6e9d98cac186005b",
        "type": "subflow",
        "name": "Contentful",
        "info": "",
        "category": "CMS",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "9c8caedf45391f9d"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#E6E0F8",
        "icon": "node-red-contrib-lowercase/Contentful.png"
    },
    {
        "id": "dc3c69876090a5c0",
        "type": "subflow",
        "name": "Perfion",
        "info": "",
        "category": "Product Information Management",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#FFF0F0",
        "icon": "node-red-contrib-lowercase/Perfion.png"
    },
    {
        "id": "6c3c8350aba6c083",
        "type": "subflow",
        "name": "Salsify",
        "info": "",
        "category": "Product Information Management",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#E6E0F8",
        "icon": "node-red-contrib-lowercase/Salsify.png"
    },
    {
        "id": "706a94dd709573b4",
        "type": "subflow",
        "name": "Sterling",
        "info": "",
        "category": "OMS",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#FFF0F0",
        "icon": "node-red-contrib-lowercase/sterling.png"
    },
    {
        "id": "d940f865744566a8",
        "type": "subflow",
        "name": "Fluent",
        "info": "",
        "category": "OMS",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#929ACC",
        "icon": "node-red-contrib-lowercase/Fluent.png"
    },
    {
        "id": "3b9cdc59d6ec5dfb",
        "type": "subflow",
        "name": "PayPal",
        "info": "",
        "category": "Payment Gateway",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#FFF0F0",
        "icon": "node-red-contrib-lowercase/PayPal.png"
    },
    {
        "id": "f2f64cec4d80510b",
        "type": "subflow",
        "name": "RazorPay",
        "info": "",
        "category": "Payment Gateway",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#92C4EC",
        "icon": "node-red-contrib-lowercase/RazorPay.png"
    },
    {
        "id": "2320dd24888911d7",
        "type": "subflow",
        "name": "UPI",
        "info": "",
        "category": "Payment Gateway",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#FFF0F0",
        "icon": "node-red-contrib-lowercase/UPI.png"
    },
    {
        "id": "6d540e443fd130e3",
        "type": "subflow",
        "name": "GooglePay",
        "info": "",
        "category": "Payment Gateway",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#E7E7AE",
        "icon": "node-red-contrib-lowercase/GooglePay.png"
    },
    {
        "id": "7d065f632b479f3e",
        "type": "subflow",
        "name": "PayTM",
        "info": "",
        "category": "Payment Gateway",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#FFF0F0",
        "icon": "node-red-contrib-lowercase/PayTM.png"
    },
    {
        "id": "ff2c51aaee592084",
        "type": "subflow",
        "name": "Rupifi",
        "info": "",
        "category": "Payment Gateway",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red-contrib-lowercase/Rupifi.png"
    },
    {
        "id": "fa622a3e2c2c1ad7",
        "type": "subflow",
        "name": "NETS",
        "info": "",
        "category": "Payment Gateway",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#E6E0F8",
        "icon": "node-red-contrib-lowercase/NETS.png"
    },
    {
        "id": "10a2a09dbbf52bb3",
        "type": "subflow",
        "name": "Zepic",
        "info": "",
        "category": "CDP",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#FFF0F0",
        "icon": "node-red-contrib-lowercase/Zepic.png"
    },
    {
        "id": "1a6b32441268655d",
        "type": "subflow",
        "name": "PIMCore CDP",
        "info": "",
        "category": "CDP",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#6495ED",
        "icon": "node-red-contrib-lowercase/pim.png"
    },
    {
        "id": "d0339f1445778e4e",
        "type": "subflow",
        "name": "Shiprocket",
        "info": "",
        "category": "Shipping",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#68C2EC",
        "icon": "node-red-contrib-lowercase/Shiprocket.png"
    },
    {
        "id": "224fdca117b8aed7",
        "type": "subflow",
        "name": "Shippo",
        "info": "",
        "category": "Shipping",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#E6E7E7",
        "icon": "node-red-contrib-lowercase/Shippo.png"
    },
    {
        "id": "fa4e02c06d4b8c16",
        "type": "subflow",
        "name": "DHL",
        "info": "",
        "category": "Shipping",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#E2D96E",
        "icon": "node-red-contrib-lowercase/DHL.png"
    },
    {
        "id": "aab5cad5474404e2",
        "type": "subflow",
        "name": "SingPost",
        "info": "",
        "category": "Shipping",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#FFF0F0",
        "icon": "node-red-contrib-lowercase/SingPost.png"
    },
    {
        "id": "0ab16dd89df8891c",
        "type": "subflow",
        "name": "EasyPost",
        "info": "",
        "category": "Shipping",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#24A5DE",
        "icon": "node-red-contrib-lowercase/EasyPost.png"
    },
    {
        "id": "16804ab3ed0bf62e",
        "type": "subflow",
        "name": "AUPost",
        "info": "",
        "category": "Shipping",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#E06764",
        "icon": "node-red-contrib-lowercase/AUPost.png"
    },
    {
        "id": "d6582ed4db6bed2b",
        "type": "subflow",
        "name": "Mercaux",
        "info": "",
        "category": "POS",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#6CB271",
        "icon": "node-red-contrib-lowercase/Mercaux.png"
    },
    {
        "id": "fd10a09ceb9c85d3",
        "type": "subflow",
        "name": "GPOS",
        "info": "",
        "category": "POS",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "icon": "node-red-contrib-lowercase/gpos.png"
    },
    {
        "id": "c7ac3c3097e090c5",
        "type": "subflow",
        "name": "Zinrelo",
        "info": "",
        "category": "Loyalty",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#D7E2C8",
        "icon": "node-red-contrib-lowercase/Zinrelo.png"
    },
    {
        "id": "2c039b6a5be79ff0",
        "type": "subflow",
        "name": "Algolia Personalized",
        "info": "",
        "category": "Personalisation",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#0096FF",
        "icon": "node-red-contrib-lowercase/algolia.png"
    },
    {
        "id": "38708d8a5e7a48d9",
        "type": "subflow",
        "name": "Monetate",
        "info": "",
        "category": "Product Recommendation",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#E8847E",
        "icon": "node-red-contrib-lowercase/Monetate.png"
    },
    {
        "id": "996e97edb8d79dbe",
        "type": "subflow",
        "name": "Iterate.ai",
        "info": "",
        "category": "AI ChatBot",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#FFF0F0",
        "icon": "node-red-contrib-lowercase/Iterate.png"
    },
    {
        "id": "9c153ee7dc4c1b72",
        "type": "subflow",
        "name": "Voucherify",
        "info": "",
        "category": "Promotions, Offers and Vouchers",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#3B84C7",
        "icon": "node-red-contrib-lowercase/Voucherify.png"
    },
    {
        "id": "e406e91ccb5b4090",
        "type": "subflow",
        "name": "TalonOne",
        "info": "",
        "category": "Promotions, Offers and Vouchers",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#C0DEED",
        "icon": "node-red-contrib-lowercase/TalonOne.png"
    },
    {
        "id": "8540d243f2d74e96",
        "type": "subflow",
        "name": "Oracle ATG",
        "info": "",
        "category": "Commerce",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#FFFFFF",
        "icon": "node-red-contrib-lowercase/oracle-atg.png"
    },
    {
        "id": "5dd9278f74ef5ab6",
        "type": "subflow",
        "name": "Vendure",
        "info": "",
        "category": "Commerce",
        "in": [
            {
                "x": 80,
                "y": 680,
                "wires": [
                    {
                        "id": "d7dd4540d9160881"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "api",
                "type": "str",
                "value": "{{{api}}}"
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red-contrib-lowercase/vendure.png"
    },
    {
        "id": "499e621228906275",
        "type": "subflow",
        "name": "Commerce Tools",
        "info": "",
        "category": "Commerce",
        "in": [
            {
                "x": 60,
                "y": 660,
                "wires": [
                    {
                        "id": "b73bba156a652101"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "api",
                "type": "str",
                "value": "{{{api}}}"
            }
        ],
        "meta": {},
        "color": "#FFCC66",
        "icon": "node-red-contrib-lowercase/ct.png"
    },
    {
        "id": "3d6ec045bb21c629",
        "type": "subflow",
        "name": "HCL Commerce",
        "info": "",
        "category": "Commerce",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#569BCF",
        "icon": "node-red-contrib-lowercase/hcl.png"
    },
    {
        "id": "b2800c619b6dc3a7",
        "type": "subflow",
        "name": "SAP Hybris",
        "info": "",
        "category": "Commerce",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#a5d6f7",
        "icon": "node-red-contrib-lowercase/sap.png"
    },
    {
        "id": "5ed33bda138a6b7e",
        "type": "subflow",
        "name": "Emporix",
        "info": "",
        "category": "Commerce",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#a5d6f7",
        "icon": "node-red-contrib-lowercase/emporix.png"
    },
    {
        "id": "6347feb0c8258857",
        "type": "subflow",
        "name": "Shopify",
        "info": "",
        "category": "Commerce",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#FFF0F0",
        "icon": "node-red-contrib-lowercase/shopify.png"
    },
    {
        "id": "828fd5b79695dcc7",
        "type": "subflow",
        "name": "Magento",
        "info": "",
        "category": "Commerce",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#D65E5B",
        "icon": "node-red-contrib-lowercase/magento.png"
    },
    {
        "id": "73db7e1c1827e0d0",
        "type": "subflow",
        "name": "Spryker",
        "info": "",
        "category": "Commerce",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#87A980",
        "icon": "node-red-contrib-lowercase/spryker.png"
    },
    {
        "id": "2b226d241d5057f9",
        "type": "subflow",
        "name": "Intershop",
        "info": "",
        "category": "Commerce",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#E3635E",
        "icon": "node-red-contrib-lowercase/intershop.png"
    },
    {
        "id": "8e0944f4a41c720d",
        "type": "subflow",
        "name": "Big Commerce",
        "info": "",
        "category": "Commerce",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#FFF0F0",
        "icon": "node-red-contrib-lowercase/big.png"
    },
    {
        "id": "19fe198d73f0d73c",
        "type": "subflow",
        "name": "ElasticPath",
        "info": "",
        "category": "Commerce",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#FFF0F0",
        "icon": "node-red-contrib-lowercase/elasticpath.png"
    },
    {
        "id": "8c96e576e5ff0269",
        "type": "switch",
        "z": "b6e6b6bb6c12b1cb",
        "name": "Route",
        "property": "req.params.api",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "getContent",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 210,
        "y": 140,
        "wires": [
            [
                "ffa635a45650baf0"
            ]
        ]
    },
    {
        "id": "e6914259feffc3f3",
        "type": "http response",
        "z": "b6e6b6bb6c12b1cb",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 780,
        "y": 140,
        "wires": []
    },
    {
        "id": "ffa635a45650baf0",
        "type": "http request",
        "z": "b6e6b6bb6c12b1cb",
        "name": "Strapi",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://49.206.253.146:1337/api/amebs?populate=*",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer 9eb22dcc3001f59120c3be6a13ffdeffba2e3b8aa79e168fe962fe10e54c8bd1d9b305ffad193f339fde5207fe512bf99682ea066b8949db8f315a4e5586fd523f0d2e9736462ccdb8c3c25186299ed81ab6525e829efe986bed06e2a54643f1952f771c29289300cbf8e42d73bd5acc89dbbc45f0fe79fcc34c366a2ad6f280"
            }
        ],
        "x": 410,
        "y": 140,
        "wires": [
            [
                "fc4ad59254c607d6"
            ]
        ]
    },
    {
        "id": "c501aaaaf85c84ee",
        "type": "function",
        "z": "b6e6b6bb6c12b1cb",
        "name": "Strapi",
        "func": "var title1 = msg.payload.data[0].attributes.name;\n\nnode.warn(\"title1  \" + title1);\n\nvar title2 = msg.payload.data[1].attributes.name;\n\nnode.warn(\"title2  \" + title2);\n\nvar description1 = msg.payload.data[0].attributes.name;\n\nnode.warn(\"description1  \" + description1);\n\nvar description2 = msg.payload.data[1].attributes.name;\n\nnode.warn(\"description2  \" + description2);\n\nvar url3 = msg.payload.data[0].attributes.Banner.data.attributes.formats.large.url;\n\nnode.warn(\"url3  \" + url3);\n\nvar url4 = msg.payload.data[1].attributes.Banner.data.attributes.formats.large.url;\n\nnode.warn(\"url4  \" + url4);\n\nvar baseurl = \"http://49.206.253.146:1773\";\n\nvar url1 = baseurl + url3;\n\nvar url2 = baseurl + url4;\n\nmsg.payload = {\n\n    \"items\": [{ \"title\": title1, \"description\": description1, \"url\": url1 }, { \"title\": title2, \"description\": description2, \"url\": url2 }]\n\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "fc4ad59254c607d6",
        "type": "function",
        "z": "b6e6b6bb6c12b1cb",
        "name": "Strapi",
        "func": "const apiResponse = msg.payload;\n\n// Define base URL\nconst baseUrl = \"http://49.206.253.146:1337\"; // Replace \"http://49.206.253.146:1337\" with your base URL\n\n// Extracting large image URLs with titles and base URL\nconst imagesWithTitles = apiResponse.data.map(item => {\n  return item.attributes.amebAssets.data.map(asset => {\n    return {\n      title: asset.attributes.name,\n      url: baseUrl + asset.attributes.formats.large.url\n    };\n  });\n}).flat();\n\nmsg.payload = imagesWithTitles;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 140,
        "wires": [
            [
                "e6914259feffc3f3"
            ]
        ]
    },
    {
        "id": "aaa91371bde55be2",
        "type": "switch",
        "z": "8269f83d98cc79b2",
        "name": "Route",
        "property": "req.params.api",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "stripe_checkout",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 200,
        "y": 120,
        "wires": [
            [
                "c1a45a174fe95d0b"
            ]
        ]
    },
    {
        "id": "c1a45a174fe95d0b",
        "type": "function",
        "z": "8269f83d98cc79b2",
        "name": "stripeCheckout",
        "func": "var require = context.global.get('require');\nvar stripe_accesstoken = msg.req.headers.stripe_accesstoken;\nvar cancel_url = msg.payload.cancel_url;\nnode.warn(\"cancel_url : \" + cancel_url);\nvar currency = msg.payload.line_items[0].price_data.currency;\nnode.warn(\"currency : \" + currency);\nmsg.headers = {};\nmsg.headers = {\n    'Authorization': 'Bearer ' + stripe_accesstoken,\n    'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nvar postData = qs.stringify(msg.payload);\nmsg.payload = postData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "qs",
                "module": "querystring"
            }
        ],
        "x": 380,
        "y": 120,
        "wires": [
            [
                "ca572cdc267ab929"
            ]
        ]
    },
    {
        "id": "a4d7f40a29c8b676",
        "type": "http response",
        "z": "8269f83d98cc79b2",
        "name": "stripeCheckout",
        "statusCode": "",
        "headers": {},
        "x": 800,
        "y": 120,
        "wires": []
    },
    {
        "id": "ca572cdc267ab929",
        "type": "http request",
        "z": "8269f83d98cc79b2",
        "name": "stripeCheckout",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.stripe.com/v1/checkout/sessions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "application/x-www-form-urlencoded"
            }
        ],
        "x": 600,
        "y": 120,
        "wires": [
            [
                "a4d7f40a29c8b676"
            ]
        ]
    },
    {
        "id": "22d105f6064b2af2",
        "type": "http request",
        "z": "9bce73fe20ce005e",
        "name": "Algolia Vendure Products",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://A4HOSBA5EQ-dsn.algolia.net/1/indexes/productsAEMB",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-Algolia-API-Key",
                "valueType": "other",
                "valueValue": "ff92af83e8780d396fc3c31640d5c670"
            },
            {
                "keyType": "other",
                "keyValue": "X-Algolia-Application-Id",
                "valueType": "other",
                "valueValue": "99W5FLUTWP"
            }
        ],
        "x": 350,
        "y": 80,
        "wires": [
            [
                "461f045004269263"
            ]
        ]
    },
    {
        "id": "461f045004269263",
        "type": "http response",
        "z": "9bce73fe20ce005e",
        "name": "Algolia Shopify Products",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 80,
        "wires": []
    },
    {
        "id": "a36916613de52ed8",
        "type": "http request",
        "z": "9bce73fe20ce005e",
        "name": "Algolia Vendure Products",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "https://A4HOSBA5EQ-dsn.algolia.net/1/indexes/productsAEMB",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-Algolia-API-Key",
                "valueType": "other",
                "valueValue": "ff92af83e8780d396fc3c31640d5c670"
            },
            {
                "keyType": "other",
                "keyValue": "X-Algolia-Application-Id",
                "valueType": "other",
                "valueValue": "99W5FLUTWP"
            }
        ],
        "x": 350,
        "y": 180,
        "wires": [
            [
                "f9087820430c5366"
            ]
        ]
    },
    {
        "id": "f9087820430c5366",
        "type": "http response",
        "z": "9bce73fe20ce005e",
        "name": "Algolia Shopify Products",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 180,
        "wires": []
    },
    {
        "id": "bea04daab10615ac",
        "type": "switch",
        "z": "9bce73fe20ce005e",
        "name": "Route",
        "property": "req.params.api",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "products2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "search",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 140,
        "y": 140,
        "wires": [
            [
                "22d105f6064b2af2"
            ],
            [
                "a36916613de52ed8"
            ]
        ]
    },
    {
        "id": "560cc72c68080d92",
        "type": "http request",
        "z": "319e0b6f91b1638f",
        "name": "Typesense Search",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://49.206.253.146:4455//collections/music_products/documents/search?query_by=name&q={{{q}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-TYPESENSE-API-KEY",
                "valueType": "other",
                "valueValue": "xyz"
            }
        ],
        "x": 630,
        "y": 140,
        "wires": [
            [
                "6812275952285700"
            ]
        ]
    },
    {
        "id": "6812275952285700",
        "type": "http response",
        "z": "319e0b6f91b1638f",
        "name": "Search",
        "statusCode": "",
        "headers": {},
        "x": 820,
        "y": 140,
        "wires": []
    },
    {
        "id": "17a4e381e3032698",
        "type": "function",
        "z": "319e0b6f91b1638f",
        "name": "Search",
        "func": "msg.q= msg.req.query.q; \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 140,
        "wires": [
            [
                "560cc72c68080d92"
            ]
        ]
    },
    {
        "id": "c06ea0e725dc6275",
        "type": "switch",
        "z": "319e0b6f91b1638f",
        "name": "Route",
        "property": "req.params.api",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "search",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 270,
        "y": 140,
        "wires": [
            [
                "17a4e381e3032698"
            ]
        ]
    },
    {
        "id": "9c8caedf45391f9d",
        "type": "switch",
        "z": "6e9d98cac186005b",
        "name": "Route",
        "property": "req.params.api",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "getContent",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 150,
        "y": 120,
        "wires": [
            [
                "1592cf5b52dcadc7"
            ]
        ]
    },
    {
        "id": "1592cf5b52dcadc7",
        "type": "http request",
        "z": "6e9d98cac186005b",
        "name": "Contentfull",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://cdn.contentful.com/spaces/gqlaeh1nu6o2/assets",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer h6hq_FMFVy9D7H7VcAuYX63h3s5vDyG_8HQn4VC5ESQ"
            }
        ],
        "x": 330,
        "y": 120,
        "wires": [
            [
                "fc56836f0cf256b6"
            ]
        ]
    },
    {
        "id": "fc56836f0cf256b6",
        "type": "function",
        "z": "6e9d98cac186005b",
        "name": "Contentfull",
        "func": "//const customer_id = msg.req.body.total;\n\nvar title1 = msg.payload.items[0].fields.title;\n\nvar title2 = msg.payload.items[1].fields.title;\n\nnode.warn(\"title----1-----\" + title1);\n\nnode.warn(\"title----2-----\" + title2);\n\nvar description1 = msg.payload.items[0].fields.description;\n\nvar description2 = msg.payload.items[1].fields.description;\n\nvar url1 = msg.payload.items[0].fields.file.url;\n\nvar url2 = msg.payload.items[1].fields.file.url;\n\n\n\n\nmsg.payload = {\n\n    \"items\": [{ \"title\": title1, \"description\": description1, \"url\": url1 }, { \"title\": title2, \"description\": description2, \"url\": url2 }]\n\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 120,
        "wires": [
            [
                "83b06df803db7aec"
            ]
        ]
    },
    {
        "id": "83b06df803db7aec",
        "type": "http response",
        "z": "6e9d98cac186005b",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 780,
        "y": 120,
        "wires": []
    },
    {
        "id": "8d68e16402898aa0",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Login",
        "func": "var email = msg.req.body.email;\nvar password = msg.req.body.password;\nmsg.shopUrl = context.global.get(\"shopUrl\");\nconst payload = JSON.stringify({\n  query: `mutation {\n    login(username: \\\"${email}\\\", password: \\\"${password}\\\") {\n      ... on CurrentUser {\n        id\n        identifier\n        channels {\n          id\n          token\n        }\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n        authenticationError\n      }\n      ... on NotVerifiedError {\n        errorCode\n        message\n      }\n    }\n  }`,\n  variables: {}\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json'\n};\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 80,
        "wires": [
            [
                "d4720855d1534a31"
            ]
        ]
    },
    {
        "id": "d4720855d1534a31",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "login",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": true,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 830,
        "y": 80,
        "wires": [
            [
                "4d87df2803d1c1da"
            ]
        ]
    },
    {
        "id": "9315594f20599aa7",
        "type": "http response",
        "z": "5dd9278f74ef5ab6",
        "name": "login",
        "statusCode": "",
        "headers": {},
        "x": 2070,
        "y": 60,
        "wires": []
    },
    {
        "id": "4d87df2803d1c1da",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Extract Auth Token",
        "func": "// Assuming the msg.payload is stored in a variable called 'msg.payload'\nif (msg.payload && msg.payload.data && msg.payload.data.login) {\n    const loginData = msg.payload.data.login;\n\n    if (loginData.errorCode === \"INVALID_CREDENTIALS_ERROR\") {\n        // Invalid credentials case\n        msg.statusCode = 401;\n        msg.payload = {\n            \"success\": false,\n            \"message\": \"Invalid username or password\",\n            \"error\": \"invalid_credentials\"\n        }\n        // You can handle this case, e.g., show an error message to the user\n    } else {\n        var authToken = msg.headers['vendure-auth-token'];\n        // Handle other cases if needed\n        msg.payload = {\n            \"success\": true,\n            \"message\": \"Login successful\",\n            \"user\": {\n                \"userId\": \"\",\n                \"name\": \"\",\n                \"email\": \"\",\n                \"phoneNumber\" : \"\"\n            },\n            \"token\": authToken\n        }\n    }\n} else {\n    // Handle unexpected msg.payload structure or missing data\n    msg.statusCode = 500;\n    msg.payload = {\n        \"error\": {\n            \"code\": \"500\",\n            \"message\": \"Internal Server Error\",\n            \"details\": \"An unexpected error occurred on the server. Please try again later.\"\n        }\n    }\n}\n\nmsg.loginData = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 80,
        "wires": [
            [
                "a065b236d6a365f2"
            ]
        ]
    },
    {
        "id": "0bf9c745d5146192",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Get Customer Info",
        "func": "var accessToken = msg.loginData.token;\nconst payload = JSON.stringify({\n  query: `{\n\n    activeCustomer{\n\n        id\n\n        firstName\n\n        lastName\n\n        phoneNumber\n\n        emailAddress\n\n    }\n\n  }`,\n  variables: {}\n});\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 60,
        "wires": [
            [
                "bce0b7b1678fe886"
            ]
        ]
    },
    {
        "id": "bce0b7b1678fe886",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "Get Customer Info",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1650,
        "y": 60,
        "wires": [
            [
                "aaa96d272683ff0b"
            ]
        ]
    },
    {
        "id": "aaa96d272683ff0b",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Standardizing Response",
        "func": "var id=msg.payload.data.activeCustomer.id;\nvar emailAddress = msg.payload.data.activeCustomer.emailAddress;\nvar name = msg.payload.data.activeCustomer.firstName + \" \" + msg.payload.data.activeCustomer.lastName;\nvar phoneNumber = msg.payload.data.activeCustomer.phoneNumber\nmsg.loginData.user.userId = id;\nmsg.loginData.user.name = name;\nmsg.loginData.user.email = emailAddress;\nmsg.loginData.user.phoneNumber = phoneNumber;\nmsg.payload=msg.loginData;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 60,
        "wires": [
            [
                "9315594f20599aa7"
            ]
        ]
    },
    {
        "id": "a065b236d6a365f2",
        "type": "switch",
        "z": "5dd9278f74ef5ab6",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1230,
        "y": 80,
        "wires": [
            [
                "0bf9c745d5146192"
            ],
            [
                "8f4bc4e1bf0620b7"
            ]
        ]
    },
    {
        "id": "8f4bc4e1bf0620b7",
        "type": "http response",
        "z": "5dd9278f74ef5ab6",
        "name": "Error",
        "statusCode": "",
        "headers": {},
        "x": 1410,
        "y": 120,
        "wires": []
    },
    {
        "id": "e76f57c76def99f9",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Products",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nconst payload = JSON.stringify({\n  query: `query Products {\n  products {\n    totalItems\n    items {\n      id\n      name\n      featuredAsset {\n        id\n        preview\n      }\n      variants {\n        id\n        name\n        currencyCode\n        priceWithTax\n      }\n    }\n  }\n}`,\n  variables: {}\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json'\n};\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 160,
        "wires": [
            [
                "86c3ef36e7e0b8ff"
            ]
        ]
    },
    {
        "id": "86c3ef36e7e0b8ff",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "Products",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 880,
        "y": 160,
        "wires": [
            [
                "824cd02b56f6f3f9"
            ]
        ]
    },
    {
        "id": "824cd02b56f6f3f9",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Standardizing Response",
        "func": "// The input data\nconst inputData = msg.payload;\n\n// Initialize an empty array to store the converted products\nconst products = [];\n\n// Loop through the items in the input data\ninputData.data.products.items.forEach((item) => {\n    const product = {\n        id: item.id,\n        name: item.name,\n        images: [\n            {\n                id: item.featuredAsset.id, // Add the image id\n                url: item.featuredAsset.preview\n            }\n            // Add more images here if available\n        ],\n        variants: item.variants.map((variant) => ({\n            id: variant.id,\n            variantName: variant.name,\n            price: variant.priceWithTax / 100, // Assuming the price is in cents (convert to dollars)\n            currencyCode: variant.currencyCode\n\n        }))\n    };\n    products.push(product);\n});\n\n// Create the final result object\nconst result = {\n    products\n};\n\n// Output the result in the desired format\nmsg.payload = result;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 160,
        "wires": [
            [
                "b9e3019c4f6876b9"
            ]
        ]
    },
    {
        "id": "b9e3019c4f6876b9",
        "type": "http response",
        "z": "5dd9278f74ef5ab6",
        "name": "Products",
        "statusCode": "",
        "headers": {},
        "x": 1300,
        "y": 160,
        "wires": []
    },
    {
        "id": "d7dd4540d9160881",
        "type": "switch",
        "z": "5dd9278f74ef5ab6",
        "name": "Route",
        "property": "req.params.api",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "login",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "products",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "signup",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "categories",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "category-products",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "product",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cart",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "checkout",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "orders",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "order",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 10,
        "x": 270,
        "y": 680,
        "wires": [
            [
                "8d68e16402898aa0"
            ],
            [
                "e76f57c76def99f9"
            ],
            [
                "ba54d888cbca8af3"
            ],
            [
                "893bf2ca2d3639f7"
            ],
            [
                "eb013a3631d0c449"
            ],
            [
                "9cd21deb191b7bec"
            ],
            [
                "e3e9d45283241f0d"
            ],
            [
                "02af107994e54f8b",
                "71cea8bad36aa95f",
                "d39541c5569c60eb",
                "d3a1c94706c71c08"
            ],
            [
                "18eb10f6ae77dea4"
            ],
            [
                "9bb5e83efa3244ae"
            ]
        ]
    },
    {
        "id": "9fb77e42f235b102",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Register Customer",
        "func": "var accessToken = msg.headers['vendure-auth-token'];\nvar firstName = msg.req.body.firstName;\nvar lastName = msg.req.body.lastName;\nvar phoneNumber = msg.req.body.phoneNumber;\nvar emailAddress = msg.req.body.email;\nvar password = msg.req.body.password;\n\n\nconst payload = JSON.stringify({\n  query: `\n   mutation CreateCustomer($input: CreateCustomerInput!, $password: String) {\n  createCustomer(input: $input, password: $password) {\n    ... on Customer {\n      id\n      firstName\n      lastName\n      phoneNumber\n      emailAddress\n    }\n    ... on EmailAddressConflictError {\n      errorCode\n      message\n    }\n  }\n}\n  `,\n  variables: {\n    \"input\": {\n      \"firstName\": firstName,\n      \"lastName\": lastName,\n      \"emailAddress\": emailAddress,\n      \"phoneNumber\": phoneNumber\n    },\n    \"password\": password\n  }\n\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 240,
        "wires": [
            [
                "45566f4913de9417"
            ]
        ]
    },
    {
        "id": "45566f4913de9417",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "register customer",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/admin-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1350,
        "y": 240,
        "wires": [
            [
                "eb9b8b6f524668fb"
            ]
        ]
    },
    {
        "id": "eb9b8b6f524668fb",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Check Error",
        "func": "\nif (msg.payload && msg.payload.data && msg.payload.data.createCustomer && msg.payload.data.createCustomer.errorCode === \"EMAIL_ADDRESS_CONFLICT_ERROR\") {\n    msg.statusCode = 409;\n    msg.payload = {\n        \"message\": \"Validation error\",\n        \"data\": {\n            \"errors\": [\n                {\n                    \"field\": \"email\",\n                    \"message\": \"Email is already registered.\"\n                }\n            ]\n        }\n    };\n} else {\n    var emailAddress = msg.payload.data.createCustomer.emailAddress;\n    var name = msg.payload.data.createCustomer.firstName + \" \" + msg.payload.data.createCustomer.lastName;\n    var userId = msg.payload.data.createCustomer.id\n    msg.statusCode = 201;\n    msg.payload = {\n        \"message\": \"Signup successful\",\n        \"data\": {\n            \"userId\": userId,\n            \"name\": name,\n            \"email\": emailAddress\n        }\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 240,
        "wires": [
            [
                "c68eb2a5eb8aefb5"
            ]
        ]
    },
    {
        "id": "c68eb2a5eb8aefb5",
        "type": "http response",
        "z": "5dd9278f74ef5ab6",
        "name": "Register Customer",
        "statusCode": "",
        "headers": {},
        "x": 1790,
        "y": 240,
        "wires": []
    },
    {
        "id": "ba54d888cbca8af3",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Admin Login",
        "func": "var username = \"superadmin\";\nvar password = \"superadmin\";\nmsg.shopUrl = context.global.get(\"shopUrl\");\nconst payload = JSON.stringify({\n  query: `mutation {\n\n  login(username: \"${username}\", password: \"${password}\", rememberMe: true) {\n\n    ... on CurrentUser {\n\n      id\n\n      identifier\n\n      channels {\n\n        id\n\n        token\n\n        code\n\n        permissions\n\n      }\n\n    }\n\n    \n\n  }\n\n}`,\n  variables: {}\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json'\n};\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 240,
        "wires": [
            [
                "fb7f60181f96c2ef"
            ]
        ]
    },
    {
        "id": "fb7f60181f96c2ef",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "Admin Login",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/admin-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 890,
        "y": 240,
        "wires": [
            [
                "9fb77e42f235b102"
            ]
        ]
    },
    {
        "id": "893bf2ca2d3639f7",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Category Tree",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nconst payload = JSON.stringify({\n  query: `query {\n  collections {\n    items {\n      id\n      name\n      parent {\n        id\n        name\n      }\n      children {\n        id\n        name\n      }\n    }\n  }\n}`,\n  variables: {}\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json'\n};\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 340,
        "wires": [
            [
                "8319c1da610caf82"
            ]
        ]
    },
    {
        "id": "8319c1da610caf82",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "Category Tree",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 900,
        "y": 340,
        "wires": [
            [
                "31bfac0f85ad3c01"
            ]
        ]
    },
    {
        "id": "b5338b8b21751439",
        "type": "http response",
        "z": "5dd9278f74ef5ab6",
        "name": "Category Tree",
        "statusCode": "",
        "headers": {},
        "x": 1380,
        "y": 340,
        "wires": []
    },
    {
        "id": "31bfac0f85ad3c01",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Standardizing Response",
        "func": "const data = msg.payload;\n\n// Create a map to efficiently look up categories by ID\nconst categoryMap = {};\n\n// Populate the category map\ndata.data.collections.items.forEach(category => {\n    categoryMap[category.id] = {\n        id: category.id,\n        name: category.name,\n        children: category.children,\n    };\n});\n\n// Create a function to build the category tree\nfunction buildCategoryTree(categoryId) {\n    const category = categoryMap[categoryId];\n    if (category) {\n        return {\n            id: category.id,\n            name: category.name,\n            children: category.children.map(child => buildCategoryTree(child.id)),\n        };\n    }\n    return null;\n}\n\n// Find the root categories (those with no parent)\nconst rootCategories = data.data.collections.items.filter(category => !categoryMap[category.parent.id]);\n\n// Build the category tree for each root category\nconst categoryTree = rootCategories.map(category => buildCategoryTree(category.id));\n\nmsg.payload = {categories : categoryTree};\n// console.log(JSON.stringify(categoryTree, null, 2));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 340,
        "wires": [
            [
                "b5338b8b21751439"
            ]
        ]
    },
    {
        "id": "eb013a3631d0c449",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Category Products",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar categoryId = msg.req.query.categoryId;\nconst payload = JSON.stringify({\n  query: `query Collection($collectionId: ID) {\n  collection(id: $collectionId) {\n    id\n    name\n    productVariants {\n      items {\n        product {\n          id\n          name\n          featuredAsset {\n            id\n            preview\n          }\n          description\n        }\n        id\n        name\n        currencyCode\n        priceWithTax\n      }\n    }\n  }\n}`,\n  variables: {\n    \"collectionId\": categoryId\n  }\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json'\n};\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 440,
        "wires": [
            [
                "8a45018459ea680e"
            ]
        ]
    },
    {
        "id": "8a45018459ea680e",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "Category Products",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 910,
        "y": 440,
        "wires": [
            [
                "c7dc1f422c057636"
            ]
        ]
    },
    {
        "id": "c7dc1f422c057636",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Standardizing Response",
        "func": "// Input data\nconst inputData = msg.payload;\n\n// Convert the input data to the desired format\nconst products = inputData.data.collection.productVariants.items.map((item) => {\n    const images = [\n        {\n            id: item.product.featuredAsset.id,\n            url: item.product.featuredAsset.preview\n        }\n        // You can add more images here if available\n    ];\n\n    return {\n        id: item.product.id,\n        name: item.product.name,\n        images,\n        variants: [\n            {\n                id: item.id,\n                price: item.priceWithTax / 100, // Assuming the price is in cents (convert to dollars)\n                currencyCode: item.currencyCode\n            }\n        ]\n    };\n});\n\n// Create the final result object\nconst result = {\n    products\n};\n\n// Output the result in the desired format\n//console.log(JSON.stringify(result, null, 2));\n\nmsg.payload=result;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 440,
        "wires": [
            [
                "f97e3962080cbd85"
            ]
        ]
    },
    {
        "id": "f97e3962080cbd85",
        "type": "http response",
        "z": "5dd9278f74ef5ab6",
        "name": "Category Products",
        "statusCode": "",
        "headers": {},
        "x": 1450,
        "y": 440,
        "wires": []
    },
    {
        "id": "81890f44b9c26407",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "Product",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 860,
        "y": 540,
        "wires": [
            [
                "ddf65e6e960c56df"
            ]
        ]
    },
    {
        "id": "ddf65e6e960c56df",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Standardizing Response",
        "func": "function mapApiResponseToOutputSchema(apiResponse) {\n    const { product } = apiResponse.data;\n    const {\n        id,\n        name,\n        description,\n        variants,\n        assets: [asset],\n    } = product;\n\n    const productImages = [\n        {\n            id: asset.preview.split('/').pop(),\n            url: asset.preview,\n        },\n    ];\n\n    const mappedVariants = variants.map((variant) => {\n        const {\n            id,\n            name,\n            priceWithTax,\n            currencyCode,\n            assets: variantAssets,\n            options,\n        } = variant;\n\n        const variantImages = variantAssets.map((variantAsset) => {\n            if (variantAsset.preview) {\n                return {\n                    id: variantAsset.preview.split('/').pop(),\n                    url: variantAsset.preview,\n                };\n            }\n            // Handle the case where there's no preview image\n            return null;\n        }).filter(Boolean);\n\n        const variantAttributes = {};\n        options.forEach((option) => {\n            variantAttributes[option.group.name] = option.name;\n        });\n\n        return {\n            id,\n            name,\n            price :priceWithTax,\n            currencyCode,\n            images: variantImages,\n            attributes: variantAttributes,\n        };\n    });\n\n    return {\n        product: {\n            id,\n            name,\n            description,\n            images: productImages,\n            variants: mappedVariants,\n        },\n    };\n}\n\n// Your API response (msg.payload)\nconst apiResponse = msg.payload;\n\n// Mapping the API response to the output schema\nconst mappedData = mapApiResponseToOutputSchema(apiResponse);\n\n// Set the result as the new msg.payload\nmsg.payload = mappedData;\n\n// Return the updated msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 540,
        "wires": [
            [
                "6b51dea5306b42e1"
            ]
        ]
    },
    {
        "id": "6b51dea5306b42e1",
        "type": "http response",
        "z": "5dd9278f74ef5ab6",
        "name": "Product",
        "statusCode": "",
        "headers": {},
        "x": 1300,
        "y": 540,
        "wires": []
    },
    {
        "id": "9cd21deb191b7bec",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Product",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar productId = msg.req.query.productId;\nconst payload = JSON.stringify({\n  query: `\n  query Product($productId: ID) {\n  product(id: $productId) {\n    id\n    name\n    description\n    assets {\n      preview\n    }\n    variants {\n      id\n      name\n      priceWithTax\n      currencyCode\n      assets {\n        preview\n      }\n      options {\n        name\n        group {\n          name\n        }\n      }\n    }\n  }\n}`,\n  variables: {\n    \"productId\": productId\n  }\n});\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload)\n};\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 540,
        "wires": [
            [
                "81890f44b9c26407"
            ]
        ]
    },
    {
        "id": "132adc3c639c1359",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Active Order",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar accessToken = msg.req.headers.accesstoken;\nconst payload = JSON.stringify({\n  query: `query ActiveOrder {\n  activeOrder {\n    id\n    lines {\n      id\n      linePriceWithTax\n      quantity\n      productVariant {\n        id\n        name\n        priceWithTax\n        assets {\n          preview\n        }\n        product {\n          assets {\n            preview\n          }\n        }\n        currencyCode\n      }\n    }\n    totalWithTax\n    totalQuantity\n    currencyCode\n  }\n}`,\n  variables: {}\n});\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 620,
        "wires": [
            [
                "baaa3512a9317593"
            ]
        ]
    },
    {
        "id": "baaa3512a9317593",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "activeOrder",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 890,
        "y": 620,
        "wires": [
            [
                "52e9e4a73cb14796"
            ]
        ]
    },
    {
        "id": "6d2e8c8579739005",
        "type": "http response",
        "z": "5dd9278f74ef5ab6",
        "name": "Cart",
        "statusCode": "",
        "headers": {},
        "x": 1350,
        "y": 620,
        "wires": []
    },
    {
        "id": "52e9e4a73cb14796",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Standardizing Response",
        "func": "if (msg.payload.data.activeOrder === null) {\n    msg.statusCode = 404;\n} else {\n    function convertApiResponse(apiResponse) {\n        const activeOrder = apiResponse.data.activeOrder;\n\n        // Helper function to convert the productVariant structure\n        function convertProductVariant(productVariant) {\n            const images = [\n                ...productVariant.product.assets.map((asset) => asset.preview),\n                ...productVariant.assets.map((asset) => asset.preview),\n            ];\n\n            return {\n                id: productVariant.id,\n                name: productVariant.name,\n                price: productVariant.priceWithTax,\n                currencyCode: productVariant.currencyCode,\n                images: images.map((url) => ({\n                    url: url,\n                })),\n            };\n        }\n\n        // Convert the lines in the cart\n        const lines = activeOrder.lines.map((line) => ({\n            id: line.id,\n            quantity: line.quantity,\n            linePrice: line.linePriceWithTax,\n            productVariant: convertProductVariant(line.productVariant),\n        }));\n\n        // Create the final cart object\n        const cart = {\n            id: activeOrder.id,\n            lines,\n            total: activeOrder.totalWithTax,\n            currencyCode: activeOrder.currencyCode,\n            totalQuantity: activeOrder.totalQuantity,\n        };\n\n        return { cart };\n    }\n\n    // Example API response\n    const apiResponse = msg.payload;\n\n    // Convert the API response to the desired format\n    const formattedCart = convertApiResponse(apiResponse);\n\n    // Log the formatted cart\n    //console.log(JSON.stringify(formattedCart, null, 2));\n\n    msg.payload = formattedCart;\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 620,
        "wires": [
            [
                "6d2e8c8579739005"
            ]
        ]
    },
    {
        "id": "63fb5efc72f28ebf",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Add Item to Order",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar accessToken = msg.req.headers.accesstoken;\nvar productVariantId = msg.req.body.productVariantId;\nvar quantity = msg.req.body.quantity;\n\nconst payload = JSON.stringify({\n  query: `\n    mutation AddItemToOrder($productVariantId: ID!, $quantity: Int!) {\n  addItemToOrder(productVariantId: $productVariantId, quantity: $quantity) {\n    ... on Order {\n      id\n      lines {\n        id\n        linePriceWithTax\n        quantity\n        productVariant {\n          id\n          name\n          priceWithTax\n          assets {\n            preview\n          }\n          product {\n          assets {\n            preview\n          }\n        }\n          currencyCode\n        }\n      }\n      totalWithTax\n      totalQuantity\n      currencyCode\n    }\n  }\n}\n  `,\n  variables: {\n    \"productVariantId\": productVariantId,\n    \"quantity\": quantity\n  }\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 680,
        "wires": [
            [
                "1e4b8371e9486e42"
            ]
        ]
    },
    {
        "id": "1e4b8371e9486e42",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "Add Item to Order",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 680,
        "wires": [
            [
                "3c72e606ae87abed"
            ]
        ]
    },
    {
        "id": "79210ab71c536535",
        "type": "http response",
        "z": "5dd9278f74ef5ab6",
        "name": "Add Item to Order",
        "statusCode": "",
        "headers": {},
        "x": 1450,
        "y": 680,
        "wires": []
    },
    {
        "id": "3c72e606ae87abed",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Standardizing Response",
        "func": "if (msg.payload.data === null) {\n    msg.statusCode = 404;\n} else {\n    function convertApiResponse(apiResponse) {\n        const addItemToOrder = apiResponse.data.addItemToOrder;\n\n        // Helper function to convert the productVariant structure\n        function convertProductVariant(productVariant) {\n            const images = [\n                ...productVariant.product.assets.map((asset) => asset.preview),\n                ...productVariant.assets.map((asset) => asset.preview),\n            ];\n\n            return {\n                id: productVariant.id,\n                name: productVariant.name,\n                price: productVariant.priceWithTax,\n                currencyCode: productVariant.currencyCode,\n                images: images.map((url) => ({\n                    url: url,\n                })),\n            };\n        }\n\n        // Convert the lines in the cart\n        const lines = addItemToOrder.lines.map((line) => ({\n            id: line.id,\n            quantity: line.quantity,\n            linePrice: line.linePriceWithTax,\n            productVariant: convertProductVariant(line.productVariant),\n        }));\n\n        // Create the final cart object\n        const cart = {\n            id: addItemToOrder.id,\n            lines,\n            total: addItemToOrder.totalWithTax,\n            currencyCode: addItemToOrder.currencyCode,\n            totalQuantity: addItemToOrder.totalQuantity,\n        };\n\n        return { cart };\n    }\n\n    // Example API response\n    const apiResponse = msg.payload;\n\n    // Convert the API response to the desired format\n    const formattedCart = convertApiResponse(apiResponse);\n\n    // Log the formatted cart\n    //console.log(JSON.stringify(formattedCart, null, 2));\n\n    msg.payload = formattedCart;\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 680,
        "wires": [
            [
                "79210ab71c536535"
            ]
        ]
    },
    {
        "id": "f534bf5d607231ed",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Remove Order Line",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar accessToken = msg.req.headers.accesstoken;\nvar orderLineId = msg.req.query.lineId;\n\nconst payload = JSON.stringify({\n  query: `\n    mutation Mutation($orderLineId: ID!) {\n  removeOrderLine(orderLineId: $orderLineId) {\n    ... on Order {\n      id\n      lines {\n        id\n        linePriceWithTax\n        quantity\n        productVariant {\n          id\n          name\n          priceWithTax\n          assets {\n            preview\n          }\n          product {\n          assets {\n            preview\n          }\n        }\n          currencyCode\n        }\n      }\n      totalWithTax\n      totalQuantity\n      currencyCode\n    }\n    ... on OrderModificationError {\n      errorCode\n      message\n    }\n  }\n} \n  `,\n  variables: {\n    \"orderLineId\": orderLineId\n  }\n});\n\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\n\nmsg.payload = payload;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 800,
        "wires": [
            [
                "73cb5d519766299d"
            ]
        ]
    },
    {
        "id": "73cb5d519766299d",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "Remove Order Line",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 800,
        "wires": [
            [
                "0cc2008f83dd12a1"
            ]
        ]
    },
    {
        "id": "f9db713e0f83fd1e",
        "type": "http response",
        "z": "5dd9278f74ef5ab6",
        "name": "Remove Order Line",
        "statusCode": "",
        "headers": {},
        "x": 1450,
        "y": 800,
        "wires": []
    },
    {
        "id": "0cc2008f83dd12a1",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Standardizing Response",
        "func": "if (msg.payload.data === null) {\n    msg.statusCode = 404;\n} else {\n    function convertApiResponse(apiResponse) {\n        const removeOrderLine = apiResponse.data.removeOrderLine;\n\n        // Helper function to convert the productVariant structure\n        function convertProductVariant(productVariant) {\n            const images = [\n                ...productVariant.product.assets.map((asset) => asset.preview),\n                ...productVariant.assets.map((asset) => asset.preview),\n            ];\n\n            return {\n                id: productVariant.id,\n                name: productVariant.name,\n                price: productVariant.priceWithTax,\n                currencyCode: productVariant.currencyCode,\n                images: images.map((url) => ({\n                    url: url,\n                })),\n            };\n        }\n\n        // Convert the lines in the cart\n        const lines = removeOrderLine.lines.map((line) => ({\n            id: line.id,\n            quantity: line.quantity,\n            linePrice: line.linePriceWithTax,\n            productVariant: convertProductVariant(line.productVariant),\n        }));\n\n        // Create the final cart object\n        const cart = {\n            id: removeOrderLine.id,\n            lines,\n            total: removeOrderLine.totalWithTax,\n            currencyCode: removeOrderLine.currencyCode,\n            totalQuantity: removeOrderLine.totalQuantity,\n        };\n\n        return { cart };\n    }\n\n    // Example API response\n    const apiResponse = msg.payload;\n\n    // Convert the API response to the desired format\n    const formattedCart = convertApiResponse(apiResponse);\n\n    // Log the formatted cart\n    //console.log(JSON.stringify(formattedCart, null, 2));\n\n    msg.payload = formattedCart;\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 800,
        "wires": [
            [
                "f9db713e0f83fd1e"
            ]
        ]
    },
    {
        "id": "85049ace8283c16b",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Adjust Order Line",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar accessToken = msg.req.headers.accesstoken;\nvar orderLineId = msg.req.body.lineId;\nvar quantity = msg.req.body.quantity;\n\nconst payload = JSON.stringify({\n  query: `\n    mutation AdjustOrderLine($orderLineId: ID!, $quantity: Int!) {\n  adjustOrderLine(orderLineId: $orderLineId, quantity: $quantity) {\n    ... on Order {\n      id\n      lines {\n        id\n        linePriceWithTax\n        quantity\n        productVariant {\n          id\n          name\n          priceWithTax\n          assets {\n            preview\n          }\n          product {\n          assets {\n            preview\n          }\n        }\n          currencyCode\n        }\n      }\n      totalWithTax\n      totalQuantity\n      currencyCode\n    }\n    ... on OrderModificationError {\n      errorCode\n      message\n    }\n    ... on OrderLimitError {\n      errorCode\n      message\n      maxItems\n    }\n    ... on NegativeQuantityError {\n      errorCode\n      message\n    }\n    ... on InsufficientStockError {\n      errorCode\n      message\n      quantityAvailable\n    }\n  }\n}\n  `,\n  variables: {\n    \"orderLineId\": orderLineId,\n    \"quantity\": quantity\n  }\n});\n\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 740,
        "wires": [
            [
                "ac4f4e69acfd90b7"
            ]
        ]
    },
    {
        "id": "ac4f4e69acfd90b7",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "Adjust Order Line",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 740,
        "wires": [
            [
                "2c692435e718b6ea"
            ]
        ]
    },
    {
        "id": "373372c269c871f3",
        "type": "http response",
        "z": "5dd9278f74ef5ab6",
        "name": "Adjust Order Line",
        "statusCode": "",
        "headers": {},
        "x": 1450,
        "y": 740,
        "wires": []
    },
    {
        "id": "2c692435e718b6ea",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Standardizing Response",
        "func": "if (msg.payload.data === null) {\n    msg.statusCode = 404;\n} else {\n    function convertApiResponse(apiResponse) {\n        const adjustOrderLine = apiResponse.data.adjustOrderLine;\n\n        // Helper function to convert the productVariant structure\n        function convertProductVariant(productVariant) {\n            const images = [\n                ...productVariant.product.assets.map((asset) => asset.preview),\n                ...productVariant.assets.map((asset) => asset.preview),\n            ];\n\n            return {\n                id: productVariant.id,\n                name: productVariant.name,\n                price: productVariant.priceWithTax,\n                currencyCode: productVariant.currencyCode,\n                images: images.map((url) => ({\n                    url: url,\n                })),\n            };\n        }\n\n        // Convert the lines in the cart\n        const lines = adjustOrderLine.lines.map((line) => ({\n            id: line.id,\n            quantity: line.quantity,\n            linePrice: line.linePriceWithTax,\n            productVariant: convertProductVariant(line.productVariant),\n        }));\n\n        // Create the final cart object\n        const cart = {\n            id: adjustOrderLine.id,\n            lines,\n            total: adjustOrderLine.totalWithTax,\n            currencyCode: adjustOrderLine.currencyCode,\n            totalQuantity: adjustOrderLine.totalQuantity,\n        };\n\n        return { cart };\n    }\n\n    // Example API response\n    const apiResponse = msg.payload;\n\n    // Convert the API response to the desired format\n    const formattedCart = convertApiResponse(apiResponse);\n\n    // Log the formatted cart\n    //console.log(JSON.stringify(formattedCart, null, 2));\n\n    msg.payload = formattedCart;\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 740,
        "wires": [
            [
                "373372c269c871f3"
            ]
        ]
    },
    {
        "id": "02af107994e54f8b",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Eligible Shipping Methods",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar accessToken = msg.req.headers.accesstoken;\nconst payload = JSON.stringify({\n  query: `query Query {\n\n  eligibleShippingMethods {\n\n    id\n\n    price\n\n    priceWithTax\n\n    code\n\n    name\n\n    description\n\n    metadata\n\n    customFields\n\n  }\n\n}`,\n  variables: {}\n});\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 900,
        "wires": [
            [
                "130aca1e2145b05e"
            ]
        ]
    },
    {
        "id": "130aca1e2145b05e",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "Eligible Shipping Methods",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 900,
        "wires": [
            [
                "82a498d817346c70"
            ]
        ]
    },
    {
        "id": "71cea8bad36aa95f",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Set Billing Address",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar accessToken = msg.req.headers.accesstoken;\nvar fullName = msg.req.body.shippingAddress.firstName + \" \" + msg.req.body.shippingAddress.lastName;\nvar landmark = msg.req.body.shippingAddress.landmark;\nvar streetLine1 = msg.req.body.shippingAddress.streetLine1;\nvar streetLine2 = msg.req.body.shippingAddress.streetLine2;\nvar city = msg.req.body.shippingAddress.city;\nvar postalCode = msg.req.body.shippingAddress.postalCode;\nvar countryCode = msg.req.body.shippingAddress.countryCode;\nvar phoneNumber = msg.req.body.shippingAddress.phoneNumber;\nvar state = msg.req.body.shippingAddress.state;\n\nconst payload = JSON.stringify({\n  query: `\n    mutation{\n\n  \n\n  setOrderBillingAddress(input:{\n\nfullName: \"${fullName}\"\n\ncompany: \"${landmark}\"\n\nstreetLine1: \"${streetLine1}\"\n\nstreetLine2: \"${streetLine2}\"\n\ncity: \"${city}\"\n\nprovince : \"${state}\"\n\npostalCode: \"${postalCode}\"\n\ncountryCode: \"${countryCode}\"\n\nphoneNumber: \"${phoneNumber}\"  \n\n  })\n\n  {\n\n    ... on Order {\n\n    id\n\n    code\n\n    state\n\n    active\n\n    subTotal\n\n    total \n\n    }\n\n     ... on NoActiveOrderError {\n\n     errorCode\n\n      message\n\n    }\n\n}\n\n}\n  `,\n  variables: {}\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 960,
        "wires": [
            [
                "311e3d09fb91f29c"
            ]
        ]
    },
    {
        "id": "311e3d09fb91f29c",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "Set Billing Address",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 930,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "d31828d465c8b09c",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "Set Shipping Address",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 940,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "2248252e8ac5a41f",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Arranging Payment To Order",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar accessToken = msg.req.headers.accesstoken;\nconst payload = JSON.stringify({\n  query: `mutation {\n\n  transitionOrderToState(state:\"ArrangingPayment\")\n\n  {\n\n    ... on Order {\n\n    id\n\n    code\n\n    state\n\n    active\n\n    subTotal\n\n    total\n      totalQuantity\n      shipping\n      shippingAddress {\n        streetLine1\n        streetLine2\n        province\n        postalCode\n        country\n      }\n    }\n\n     ... on OrderStateTransitionError {\n\n     errorCode\n\n      message\n      fromState\n      toState\n      transitionError\n    }\n\n  }\n\n}`,\n  variables: {}\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1080,
        "wires": [
            [
                "df091594901437da"
            ]
        ]
    },
    {
        "id": "df091594901437da",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "Arranging Payment To Order",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1180,
        "y": 1080,
        "wires": [
            [
                "55fd3728377fbf0b"
            ]
        ]
    },
    {
        "id": "82a498d817346c70",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Set Shipping Method",
        "func": "function extractShippingMethodIds(apiResponse) {\n  const eligibleShippingMethods = apiResponse.data.eligibleShippingMethods;\n  const ids = eligibleShippingMethods.map((method) => parseInt(method.id, 10));\n  return ids;\n}\n\n// Example API response\nconst apiResponse = msg.payload;\n\n// Extract shipping method IDs as integers\nconst shippingMethodIds = extractShippingMethodIds(apiResponse);\n\n// Log the shipping method IDs\n//console.log(shippingMethodIds);\nmsg.payload = {\n  \"shippingMethodIds\": shippingMethodIds\n};\n\nvar accessToken = msg.req.headers.accesstoken;\nvar shippingMethodId = msg.payload.shippingMethodIds;\n//console.log('shippingMethodId:', shippingMethodId); // Debug statement\n\nconst payload = JSON.stringify({\n  query: `mutation {\n  setOrderShippingMethod(shippingMethodId: [${shippingMethodId}]) {\n    ... on Order {\n      id\n      createdAt\n      updatedAt\n      type\n      orderPlacedAt\n      code\n      state\n      active\n      totalQuantity\n      subTotal\n      subTotalWithTax\n      currencyCode\n      shipping\n      shippingWithTax\n      total\n      totalWithTax\n    }\n    ... on OrderModificationError {\n      errorCode\n      message\n    }\n    ... on IneligibleShippingMethodError {\n      errorCode\n      message\n    }\n    ... on NoActiveOrderError {\n      errorCode\n      message\n    }\n  }\n}`,\n  variables: {}\n});\nconsole.log('payload:', payload); // Debug statement\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\nconsole.log('headers:', msg.headers); // Debug statement\n\nmsg.payload = payload;\nconsole.log('msg:', msg); // Debug statement\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 900,
        "wires": [
            [
                "b456f7c44fa5e16f"
            ]
        ]
    },
    {
        "id": "b456f7c44fa5e16f",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "Set Shipping Method",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1440,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "d39541c5569c60eb",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Set Shipping Address",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar accessToken = msg.req.headers.accesstoken;\nvar fullName = msg.req.body.shippingAddress.firstName + \" \" + msg.req.body.shippingAddress.lastName;\nvar landmark = msg.req.body.shippingAddress.landmark;\nvar streetLine1 = msg.req.body.shippingAddress.streetLine1;\nvar streetLine2 = msg.req.body.shippingAddress.streetLine2;\nvar city = msg.req.body.shippingAddress.city;\nvar postalCode = msg.req.body.shippingAddress.postalCode;\nvar countryCode = msg.req.body.shippingAddress.countryCode;\nvar phoneNumber = msg.req.body.shippingAddress.phoneNumber;\nvar state = msg.req.body.shippingAddress.state;\n\n\nconst payload = JSON.stringify({\n  query: `mutation{\n\n  \n\n  setOrderShippingAddress(input:{\n\nfullName: \"${fullName}\"\n\ncompany: \"${landmark}\"\n\nstreetLine1: \"${streetLine1}\"\n\nstreetLine2: \"${streetLine2}\"\n\ncity: \"${city}\"\n\nprovince : \"${state}\"\n\npostalCode: \"${postalCode}\"\n\ncountryCode: \"${countryCode}\"\n\nphoneNumber: \"${phoneNumber}\"  \n \n\n  })\n\n  {\n\n    ... on Order {\n\n    id\n\n    code\n\n    state\n\n    active\n\n    subTotal\n\n    total \n\n    }\n\n     ... on NoActiveOrderError {\n\n     errorCode\n\n      message\n\n    }\n\n}\n\n}\n  `,\n  variables: {}\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1020,
        "wires": [
            [
                "d31828d465c8b09c"
            ]
        ]
    },
    {
        "id": "55fd3728377fbf0b",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Check Error",
        "func": "if (msg.payload.data.transitionOrderToState.errorCode === \"ORDER_STATE_TRANSITION_ERROR\") {\n    msg.statusCode=500\n} else {\n    // Handle the success case here\n    msg.statusCode = 200\n    \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1000,
        "wires": [
            [
                "040262af62269a0a"
            ]
        ]
    },
    {
        "id": "040262af62269a0a",
        "type": "switch",
        "z": "5dd9278f74ef5ab6",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1330,
        "y": 1000,
        "wires": [
            [
                "c9ddbff5fdfc5a56"
            ],
            [
                "1f5c66958bfd5d45"
            ]
        ]
    },
    {
        "id": "c9ddbff5fdfc5a56",
        "type": "http response",
        "z": "5dd9278f74ef5ab6",
        "name": "Error",
        "statusCode": "",
        "headers": {},
        "x": 1450,
        "y": 960,
        "wires": []
    },
    {
        "id": "1f5c66958bfd5d45",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Add Payment To Order",
        "func": "var accessToken = msg.req.headers.accesstoken;\n\n\nconst payload = JSON.stringify({\n  query: `mutation {\n\n  addPaymentToOrder(input:{\n\n      \n\n      method:\"standard-payment\"\n\n      metadata:{}\n\n      \n\n  })\n\n  {\n\n    ... on Order {\n\n    id\n    \n    code\n    type\n    state\n\n    active\n      billingAddress {\n        country\n        postalCode\n        province\n        streetLine1\n        streetLine2\n      }\n      totalQuantity\n      totalWithTax\n      subTotalWithTax\n      shippingWithTax\n      customer {\n        firstName\n        phoneNumber\n        emailAddress\n      }\n      orderPlacedAt\n    }\n\n     ... on OrderPaymentStateError {\n\n     errorCode\n\n      message\n\n    }\n    ... on IneligiblePaymentMethodError {\n      errorCode\n      message\n      eligibilityCheckerMessage\n    }\n    ... on PaymentFailedError {\n      errorCode\n      message\n      paymentErrorMessage\n    }\n    ... on PaymentDeclinedError {\n      errorCode\n      message\n      paymentErrorMessage\n    }\n    ... on OrderStateTransitionError {\n      errorCode\n      message\n      transitionError\n      fromState\n      toState\n    }\n    ... on NoActiveOrderError {\n      errorCode\n      message\n    }\n  }\n\n}`,\n  variables: {}\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1080,
        "wires": [
            [
                "90b2589257c49a63"
            ]
        ]
    },
    {
        "id": "90b2589257c49a63",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "Add Payment To Order",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1720,
        "y": 1080,
        "wires": [
            [
                "2c2408cbb7c10f12"
            ]
        ]
    },
    {
        "id": "2c2408cbb7c10f12",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Checkout",
        "func": "\nif (msg.payload.data.addPaymentToOrder.id){\n// Input timestamp\nconst inputTimestamp = msg.payload.data.addPaymentToOrder.orderPlacedAt;\n\n// Convert the input timestamp to a JavaScript Date object\nconst date = new Date(inputTimestamp);\n\n// Add 5 days to the date\ndate.setDate(date.getDate() + 5);\n\n// Define arrays for day and month names\nconst days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n// Format the date as \"Day DD Month YYYY\"\nconst formattedDate = `${days[date.getDay()]}  ${date.getDate()} ${months[date.getMonth()]} ${date.getFullYear()}`;\n\n//console.log(formattedDate); // Output: \"Sunday  5 November 2023\"\n\nmsg.payload={\n    orderId: msg.payload.data.addPaymentToOrder.id,\n    expectedDelivery : formattedDate\n}\n\n\n\n}\nelse{\n    return msg;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 1080,
        "wires": [
            [
                "96465aed92eac73a"
            ]
        ]
    },
    {
        "id": "96465aed92eac73a",
        "type": "http response",
        "z": "5dd9278f74ef5ab6",
        "name": "Checkout",
        "statusCode": "",
        "headers": {},
        "x": 2080,
        "y": 1080,
        "wires": []
    },
    {
        "id": "d3a1c94706c71c08",
        "type": "delay",
        "z": "5dd9278f74ef5ab6",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 1080,
        "wires": [
            [
                "2248252e8ac5a41f"
            ]
        ]
    },
    {
        "id": "18eb10f6ae77dea4",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Get Customer Orders",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar accessToken = msg.req.headers.accesstoken;\nconst payload = JSON.stringify({\n  query: `query ActiveCustomer($options: OrderListOptions) {\n  activeCustomer {\n    id\n    firstName\n    lastName\n    emailAddress\n    phoneNumber\n    orders(options: $options) {\n      items {\n        id\n        orderPlacedAt\n        totalWithTax\n        currencyCode\n        state\n        lines {\n          id\n          linePriceWithTax\n          quantity\n          productVariant {\n            id\n            name\n            priceWithTax\n            assets {\n              preview\n            }\n            currencyCode\n            product {\n              assets {\n                preview\n              }\n            }\n          }\n        }\n        shippingAddress {\n          fullName\n          phoneNumber\n          streetLine1\n          streetLine2\n          city\n          province\n          postalCode\n          countryCode\n          country\n        }\n        billingAddress {\n          fullName\n          phoneNumber\n          streetLine1\n          streetLine2\n          city\n          province\n          postalCode\n          countryCode\n          country  \n        }\n      }\n    }\n  }\n}`,\n  variables: {\n    \"options\": {\n      \"filter\": {\n        \"type\": {\n          \"eq\": \"Aggregate\"\n        },\n        \"active\": {\n          \"eq\": false\n        }\n      },\n      \"sort\": {\n        \"id\": \"DESC\"\n      }\n    }\n  }\n});\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1180,
        "wires": [
            [
                "8a7267292a96dfcd"
            ]
        ]
    },
    {
        "id": "8a7267292a96dfcd",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "Get Customer Orders",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 960,
        "y": 1180,
        "wires": [
            [
                "a21bec940820a593"
            ]
        ]
    },
    {
        "id": "9ee38ab09b98d573",
        "type": "http response",
        "z": "5dd9278f74ef5ab6",
        "name": "Get Customer Orders",
        "statusCode": "",
        "headers": {},
        "x": 1480,
        "y": 1180,
        "wires": []
    },
    {
        "id": "a21bec940820a593",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Standardizing Response",
        "func": "function transformApiResponse(apiResponse) {\n    const activeCustomer = apiResponse.data.activeCustomer;\n\n    // Helper function to transform a line item\n    function transformLine(lineItem) {\n        const productVariant = lineItem.productVariant;\n\n        // Combine images from 'assets' and 'product.assets'\n        const images = [\n            ...productVariant.assets.map((asset) => asset.preview),\n            ...productVariant.product.assets.map((asset) => asset.preview),\n        ];\n\n        return {\n            lineId: lineItem.id,\n            linePrice: lineItem.linePriceWithTax,\n            productId: productVariant.id,\n            productName: productVariant.name,\n            quantity: lineItem.quantity,\n            pricePerUnit: productVariant.priceWithTax,\n            currencyCode: productVariant.currencyCode,\n            images: images,\n        };\n    }\n\n    // Helper function to transform an order with billing and shipping addresses\n    function transformOrder(order) {\n        return {\n            orderId: order.id,\n            orderDate: order.orderPlacedAt,\n            totalAmount: order.totalWithTax,\n            currencyCode: order.currencyCode,\n            status: order.state,\n            lines: order.lines.map(transformLine),\n            billing: {\n                firstName: order.billingAddress.fullName.split(' ')[0],\n                lastName: order.billingAddress.fullName.split(' ')[1],\n                phoneNumber: order.billingAddress.phoneNumber,\n                streetLine1: order.billingAddress.streetLine1,\n                streetLine2: order.billingAddress.streetLine2,\n                city: order.billingAddress.city,\n                province: order.billingAddress.province,\n                postalCode: order.billingAddress.postalCode,\n                countryCode: order.billingAddress.countryCode,\n                country: order.billingAddress.country,\n            },\n            shipping: {\n                firstName: order.shippingAddress.fullName.split(' ')[0],\n                lastName: order.shippingAddress.fullName.split(' ')[1],\n                phoneNumber: order.shippingAddress.phoneNumber,\n                streetLine1: order.shippingAddress.streetLine1,\n                streetLine2: order.shippingAddress.streetLine2,\n                city: order.shippingAddress.city,\n                province: order.shippingAddress.province,\n                postalCode: order.shippingAddress.postalCode,\n                countryCode: order.shippingAddress.countryCode,\n                country: order.shippingAddress.country,\n            },\n        };\n    }\n\n    // Transform orders\n    const orders = activeCustomer.orders.items.map(transformOrder);\n\n    return {\n        customer: {\n            id: activeCustomer.id,\n            name: `${activeCustomer.firstName} ${activeCustomer.lastName}`,\n            email: activeCustomer.emailAddress,\n            phoneNumber: activeCustomer.phoneNumber,\n        },\n        orders: orders,\n    };\n}\n\n// Example API response\nconst apiResponse = msg.payload;\n\n// Transform the API response into the desired format\nconst transformedData = transformApiResponse(apiResponse);\n\n// Log the transformed data\n//console.log(JSON.stringify(transformedData, null, 2));\nmsg.payload= transformedData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1180,
        "wires": [
            [
                "9ee38ab09b98d573"
            ]
        ]
    },
    {
        "id": "e3e9d45283241f0d",
        "type": "switch",
        "z": "5dd9278f74ef5ab6",
        "name": "Cart",
        "property": "req.method",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "GET",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "POST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PUT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 470,
        "y": 700,
        "wires": [
            [
                "132adc3c639c1359"
            ],
            [
                "63fb5efc72f28ebf"
            ],
            [
                "85049ace8283c16b"
            ],
            [
                "f534bf5d607231ed"
            ]
        ]
    },
    {
        "id": "9bb5e83efa3244ae",
        "type": "function",
        "z": "5dd9278f74ef5ab6",
        "name": "Get Order Details",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar accessToken = msg.req.headers.accesstoken;\nvar orderId = msg.req.query.orderId\nconst payload = JSON.stringify({\n  query: `{\n  order(id: ${orderId}) {\n    id\n    code\n    state\n    shipping\n    lines{\n      id\n      quantity\n     productVariant{\n       id\n        product{\n            featuredAsset{\n                preview\n            }\n        } \n      sku\n      name\n      price\n    }\n    }\n    customer{\n      firstName\n      lastName\n      id\n      emailAddress\n    }\n    billingAddress{\n      fullName\n      company\n      \n    }\n    shippingAddress{\n      fullName\n      company\n    }\n    total\n    subTotal\n    totalWithTax\n    shippingLines{\n      shippingMethod{\n        name\n      }\n    }\n  }\n}`,\n  variables: {}\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1280,
        "wires": [
            [
                "c14c0c18ea54ee80"
            ]
        ]
    },
    {
        "id": "c14c0c18ea54ee80",
        "type": "http request",
        "z": "5dd9278f74ef5ab6",
        "name": "Get Order Details",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 970,
        "y": 1280,
        "wires": [
            [
                "df7faf3261ee43a8"
            ]
        ]
    },
    {
        "id": "df7faf3261ee43a8",
        "type": "http response",
        "z": "5dd9278f74ef5ab6",
        "name": "Get Order Details",
        "statusCode": "",
        "headers": {},
        "x": 1490,
        "y": 1280,
        "wires": []
    },
    {
        "id": "d2b8735dc4c42f6a",
        "type": "function",
        "z": "499e621228906275",
        "name": "Login",
        "func": "var clientId = context.global.get(\"clientId\");\nvar clientSecret = context.global.get(\"clientSecret\");\nvar base64Credentials = Buffer.from(`${clientId}:${clientSecret}`).toString('base64');\n\nmsg.projectKey = context.global.get(\"projectKey\");\nmsg.authUrl = context.global.get(\"authUrl\");\nmsg.apiUrl = context.global.get(\"apiUrl\");\nvar email = msg.req.body.email;\nvar password = msg.req.body.password;\nmsg.granType = \"password\";\nmsg.username = email;\nmsg.password = password;\n\nmsg.headers = {\n    'Authorization': `Basic ${base64Credentials}`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 60,
        "wires": [
            [
                "188c31bd6ea32c04"
            ]
        ]
    },
    {
        "id": "6ba750521641cd3e",
        "type": "http response",
        "z": "499e621228906275",
        "name": "login",
        "statusCode": "",
        "headers": {},
        "x": 1790,
        "y": 60,
        "wires": []
    },
    {
        "id": "188c31bd6ea32c04",
        "type": "http request",
        "z": "499e621228906275",
        "name": "login",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{authUrl}}}/oauth/{{{projectKey}}}/customers/token?grant_type={{{granType}}}&username={{{username}}}&password={{{password}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 850,
        "y": 60,
        "wires": [
            [
                "f4b70fd86bb0aa57"
            ]
        ]
    },
    {
        "id": "f4b70fd86bb0aa57",
        "type": "function",
        "z": "499e621228906275",
        "name": "Customer Info",
        "func": "// Assuming you have the API response stored in a variable named 'response'\n\nif (msg.payload.statusCode === 400 && msg.payload.error === \"invalid_customer_account_credentials\") {\n    msg.statusCode = 401;\n    msg.payload = {\n        \"success\": false,\n        \"message\": \"Invalid username or password\",\n        \"error\": \"invalid_credentials\"\n    }\n} else {\n    msg.access_token = msg.payload.access_token\n    msg.headers = {\n        'Authorization': `Bearer ${msg.access_token}`\n    }\n}\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 60,
        "wires": [
            [
                "ee1e782d5e0b3b29"
            ]
        ]
    },
    {
        "id": "d6b38c62c2da6f33",
        "type": "http request",
        "z": "499e621228906275",
        "name": "Customer Info",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/me",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1360,
        "y": 60,
        "wires": [
            [
                "c76cc6b9dcf70792"
            ]
        ]
    },
    {
        "id": "c76cc6b9dcf70792",
        "type": "function",
        "z": "499e621228906275",
        "name": "Standardizing Response",
        "func": "var id = msg.payload.id;\nvar name = msg.payload.firstName + \" \" + msg.payload.lastName;\nvar email = msg.payload.email;\nvar phoneNumber = msg.payload.customerNumber\n\nmsg.payload = {\n    \"success\": true,\n    \"message\": \"Login successful\",\n    \"user\": {\n        \"userId\": id,\n        \"name\": name,\n        \"email\": email,\n        \"phoneNumber\" : phoneNumber\n    },\n    \"token\": msg.access_token\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 60,
        "wires": [
            [
                "6ba750521641cd3e"
            ]
        ]
    },
    {
        "id": "ee1e782d5e0b3b29",
        "type": "switch",
        "z": "499e621228906275",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1190,
        "y": 60,
        "wires": [
            [
                "7589d1e937c182b4"
            ],
            [
                "d6b38c62c2da6f33"
            ]
        ]
    },
    {
        "id": "7589d1e937c182b4",
        "type": "http response",
        "z": "499e621228906275",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1330,
        "y": 20,
        "wires": []
    },
    {
        "id": "ba27901c418b636a",
        "type": "function",
        "z": "499e621228906275",
        "name": "Products",
        "func": "var accessToken = msg.payload.access_token;\nmsg.projectKey = context.global.get(\"projectKey\");\nmsg.apiUrl = context.global.get(\"apiUrl\");\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Authorization' : 'Bearer '+ accessToken\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 120,
        "wires": [
            [
                "046d6162fb0577ae"
            ]
        ]
    },
    {
        "id": "046d6162fb0577ae",
        "type": "http request",
        "z": "499e621228906275",
        "name": "Products",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/products?limit=50&where=masterData%28published%3Dtrue%29",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 1380,
        "y": 120,
        "wires": [
            [
                "2adbe40a3e73ed19"
            ]
        ]
    },
    {
        "id": "dfa8657c42d8b7ad",
        "type": "http response",
        "z": "499e621228906275",
        "name": "Products",
        "statusCode": "",
        "headers": {},
        "x": 1860,
        "y": 120,
        "wires": []
    },
    {
        "id": "2adbe40a3e73ed19",
        "type": "function",
        "z": "499e621228906275",
        "name": "Standardizing Response",
        "func": "function convertData(inputData) {\n    return {\n        products: inputData.results.map((result) => {\n            const productId = result.id;\n            const productImages = result.masterData.current.masterVariant.images.map((image, imageIndex) => {\n                return {\n                    url: image.url,\n                };\n            });\n\n            const masterVariant = {\n                id: result.masterData.current.masterVariant.id,\n                price: result.masterData.current.masterVariant.prices[0].value.centAmount,\n                currencyCode: result.masterData.current.masterVariant.prices[0].value.currencyCode,\n            };\n\n            const variants = result.masterData.current.variants.map((variant) => {\n                const variantData = {\n                    id: variant.id,\n                    price: variant.prices[0].value.centAmount ,\n                    currencyCode: variant.prices[0].value.currencyCode,\n                };\n                return variantData;\n            });\n\n            // Include the master variant in the variants array\n            const allVariants = [masterVariant, ...variants];\n\n            return {\n                id: productId,\n                name: result.masterData.current.name.en || result.masterData.current.name[\"en-US\"],\n                images: productImages,\n                variants: allVariants,\n            };\n        }),\n    };\n}\n\n// Example input data\nconst inputData = msg.payload;\n\n\n// Convert the input data to the desired format using the function\nconst result = convertData(inputData);\n\n\n\nmsg.payload=result;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 120,
        "wires": [
            [
                "dfa8657c42d8b7ad"
            ]
        ]
    },
    {
        "id": "7cf2013439a3e298",
        "type": "function",
        "z": "499e621228906275",
        "name": "Obtain access token",
        "func": "var scope = context.global.get(\"scope\");\nmsg.authUrl = context.global.get(\"authUrl\");\nvar clientId = context.global.get(\"clientId\");\nvar clientSecret = context.global.get(\"clientSecret\");\nvar base64Credentials = Buffer.from(`${clientId}:${clientSecret}`).toString('base64');\nvar formData = {\n    grant_type : \"client_credentials\",\n    scope : scope\n};\n\nvar formDataString = Object.keys(formData)\n    .map(function (key) {\n        return encodeURIComponent(key) + '=' + encodeURIComponent(formData[key]);\n    })\n    .join('&');\n\nmsg.headers = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Authorization': `Basic ${base64Credentials}`\n}\n\n\nmsg.payload = formDataString;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 120,
        "wires": [
            [
                "90278b151f3c865c"
            ]
        ]
    },
    {
        "id": "90278b151f3c865c",
        "type": "http request",
        "z": "499e621228906275",
        "name": "Obtain access token",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{authUrl}}}/oauth/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 980,
        "y": 120,
        "wires": [
            [
                "ba27901c418b636a"
            ]
        ]
    },
    {
        "id": "7d0b26313fbaf9ea",
        "type": "function",
        "z": "499e621228906275",
        "name": "SignUp",
        "func": "var accessToken = msg.payload.access_token;\nmsg.projectKey = context.global.get(\"projectKey\");\nmsg.apiUrl = context.global.get(\"apiUrl\");\nvar firstName = msg.req.body.firstName;\nvar lastName = msg.req.body.lastName;\nvar phoneNumber = msg.req.body.phoneNumber;\nvar emailAddress = msg.req.body.email;\nvar password = msg.req.body.password;\nmsg.payload = {\n    \"customerNumber\": phoneNumber,\n    \"email\": emailAddress,\n    \"firstName\": firstName,\n    \"lastName\": lastName,\n    \"password\": password\n}\nmsg.headers={ \n    'Authorization':  'Bearer ' + accessToken,\n    'Content-Type': 'application/json'\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 200,
        "wires": [
            [
                "71918c1733c8365f"
            ]
        ]
    },
    {
        "id": "22250fa7a3b091e6",
        "type": "http response",
        "z": "499e621228906275",
        "name": "createCustomer",
        "statusCode": "",
        "headers": {},
        "x": 1920,
        "y": 200,
        "wires": []
    },
    {
        "id": "71918c1733c8365f",
        "type": "http request",
        "z": "499e621228906275",
        "name": "createCustomer",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/customers",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1400,
        "y": 200,
        "wires": [
            [
                "6be8cd37d8a61d7f"
            ]
        ]
    },
    {
        "id": "6be8cd37d8a61d7f",
        "type": "function",
        "z": "499e621228906275",
        "name": "Standardizing Response",
        "func": "if (msg.payload.statusCode === 400 && msg.payload.errors.length > 0) {\n    msg.statusCode = 409;\n    msg.payload = {\n        \"message\": \"Validation error\",\n        \"data\": {\n            \"errors\": [\n                {\n                    \"field\": \"email\",\n                    \"message\": \"Email is already registered.\"\n                }\n            ]\n        }\n    }\n}else{\n    var id = msg.payload.customer.id;\n    var name = msg.payload.customer.firstName + \" \" + msg.payload.customer.lastName;\n    var email = msg.payload.customer.email;\n    msg.statusCode =201;\n    msg.payload = {\n        \"message\": \"Signup successful\",\n        \"data\": {\n            \"userId\": id,\n            \"name\": name ,\n            \"email\": email\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 200,
        "wires": [
            [
                "22250fa7a3b091e6"
            ]
        ]
    },
    {
        "id": "e592d84d430f13a7",
        "type": "function",
        "z": "499e621228906275",
        "name": "Category Tree",
        "func": "var accessToken = msg.payload.access_token;\nmsg.projectKey = context.global.get(\"projectKey\");\nmsg.apiUrl = context.global.get(\"apiUrl\");\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Authorization' : 'Bearer '+ accessToken\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 280,
        "wires": [
            [
                "fd11306c10a7f4a0"
            ]
        ]
    },
    {
        "id": "fd11306c10a7f4a0",
        "type": "http request",
        "z": "499e621228906275",
        "name": "Category Tree",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/categories?limit=500",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 1420,
        "y": 280,
        "wires": [
            [
                "ddc6c3498a444b97"
            ]
        ]
    },
    {
        "id": "4d568f4fddd972a6",
        "type": "http response",
        "z": "499e621228906275",
        "name": "Category Tree",
        "statusCode": "",
        "headers": {},
        "x": 1900,
        "y": 280,
        "wires": []
    },
    {
        "id": "ddc6c3498a444b97",
        "type": "function",
        "z": "499e621228906275",
        "name": "Standardizing Response",
        "func": "function convertCategories(inputData) {\n    // Create an empty result object.\n    const result = { categories: [] };\n\n    // Create a map to associate category IDs with their respective objects.\n    const categoryMap = {};\n\n    // Loop through the input data to build the category objects.\n    inputData.results.forEach(category => {\n        const categoryObject = {\n            id: category.id,\n            name: category.name.en || category.name[\"en-US\"], // You can choose another language for the name if needed\n            children: [],\n        };\n        //node.warn(category.name.en);\n        // Add the category object to the map.\n        categoryMap[category.id] = categoryObject;\n\n        // If the category has a parent, add it as a child to the parent category.\n        if (category.ancestors.length === 0) {\n            result.categories.push(categoryObject);\n        } else {\n            const parentId = category.ancestors[0].id;\n            categoryMap[parentId].children.push(categoryObject);\n        }\n    });\n\n    return result;\n}\n\n// Input data\nconst inputData = {\n    results: msg.payload.results,\n};\n\n// Convert the data\nconst convertedData = convertCategories(inputData);\n\n// Log the converted data\n// console.log(JSON.stringify(convertedData, null, 2));\nmsg.payload = convertedData;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 280,
        "wires": [
            [
                "4d568f4fddd972a6"
            ]
        ]
    },
    {
        "id": "5a1a2730706a9b7e",
        "type": "function",
        "z": "499e621228906275",
        "name": "Category Products",
        "func": "var accessToken = msg.payload.access_token;\nvar categoryId = msg.req.query.categoryId;\nmsg.projectKey = context.global.get(\"projectKey\");\nmsg.apiUrl = context.global.get(\"apiUrl\");\nconst predicate = `masterData(staged(categories(id=\"${categoryId}\")))`;\nfunction urlEncodePredicate(predicate) {\n  const encodedPredicate = encodeURIComponent(predicate);\n  return encodedPredicate;\n}\n\nconst urlEncodedPredicate = urlEncodePredicate(predicate);\n\nmsg.categoryId = urlEncodedPredicate;\n\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Authorization' : 'Bearer '+ accessToken\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 380,
        "wires": [
            [
                "94a349eefb0465b2"
            ]
        ]
    },
    {
        "id": "94a349eefb0465b2",
        "type": "http request",
        "z": "499e621228906275",
        "name": "Category Products",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/products?limit=500&where=masterData%28published%3Dtrue%29&where={{{categoryId}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 1450,
        "y": 380,
        "wires": [
            [
                "a797991be9bd5956"
            ]
        ]
    },
    {
        "id": "a76eda646556aa54",
        "type": "http response",
        "z": "499e621228906275",
        "name": "Category Products",
        "statusCode": "",
        "headers": {},
        "x": 1930,
        "y": 380,
        "wires": []
    },
    {
        "id": "a797991be9bd5956",
        "type": "function",
        "z": "499e621228906275",
        "name": "Standardizing Response",
        "func": "function convertData(inputData) {\n    return {\n        products: inputData.results.map((result) => {\n            const productId = result.id;\n            const productImages = result.masterData.current.masterVariant.images.map((image, imageIndex) => {\n                return {\n                    url: image.url,\n                };\n            });\n\n            const masterVariant = {\n                id: result.masterData.current.masterVariant.id,\n                price: result.masterData.current.masterVariant.prices[0].value.centAmount,\n                currencyCode: result.masterData.current.masterVariant.prices[0].value.currencyCode,\n            };\n\n            const variants = result.masterData.current.variants.map((variant) => {\n                const variantData = {\n                    id: variant.id,\n                    price: variant.prices[0].value.centAmount,\n                    currencyCode: variant.prices[0].value.currencyCode,\n                };\n                return variantData;\n            });\n\n            // Include the master variant in the variants array\n            const allVariants = [masterVariant, ...variants];\n\n            return {\n                id: productId,\n                name: result.masterData.current.name.en || result.masterData.current.name[\"en-US\"],\n                images: productImages,\n                variants: allVariants,\n            };\n        }),\n    };\n}\n\n// Example input data\nconst inputData = msg.payload;\n\n\n// Convert the input data to the desired format using the function\nconst result = convertData(inputData);\n\n\n\nmsg.payload = result;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 380,
        "wires": [
            [
                "a76eda646556aa54"
            ]
        ]
    },
    {
        "id": "7bf8847dc8e80bf3",
        "type": "function",
        "z": "499e621228906275",
        "name": "Obtain access token",
        "func": "var scope = context.global.get(\"scope\");\nmsg.authUrl = context.global.get(\"authUrl\");\nvar clientId = context.global.get(\"clientId\");\nvar clientSecret = context.global.get(\"clientSecret\");\nvar base64Credentials = Buffer.from(`${clientId}:${clientSecret}`).toString('base64');\nvar formData = {\n    grant_type : \"client_credentials\",\n    scope : scope\n};\n\nvar formDataString = Object.keys(formData)\n    .map(function (key) {\n        return encodeURIComponent(key) + '=' + encodeURIComponent(formData[key]);\n    })\n    .join('&');\n\nmsg.headers = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Authorization': `Basic ${base64Credentials}`\n}\n\n\nmsg.payload = formDataString;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 280,
        "wires": [
            [
                "dfd72696ae3cf1a9"
            ]
        ]
    },
    {
        "id": "dfd72696ae3cf1a9",
        "type": "http request",
        "z": "499e621228906275",
        "name": "Obtain access token",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{authUrl}}}/oauth/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 980,
        "y": 280,
        "wires": [
            [
                "e592d84d430f13a7"
            ]
        ]
    },
    {
        "id": "9e36c4e7d0082e50",
        "type": "function",
        "z": "499e621228906275",
        "name": "Obtain access token",
        "func": "var scope = context.global.get(\"scope\");\nmsg.authUrl = context.global.get(\"authUrl\");\nvar clientId = context.global.get(\"clientId\");\nvar clientSecret = context.global.get(\"clientSecret\");\nvar base64Credentials = Buffer.from(`${clientId}:${clientSecret}`).toString('base64');\nvar formData = {\n    grant_type : \"client_credentials\",\n    scope : scope\n};\n\nvar formDataString = Object.keys(formData)\n    .map(function (key) {\n        return encodeURIComponent(key) + '=' + encodeURIComponent(formData[key]);\n    })\n    .join('&');\n\nmsg.headers = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Authorization': `Basic ${base64Credentials}`\n}\n\n\nmsg.payload = formDataString;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 380,
        "wires": [
            [
                "2ce41a51fd58dbd1"
            ]
        ]
    },
    {
        "id": "2ce41a51fd58dbd1",
        "type": "http request",
        "z": "499e621228906275",
        "name": "Obtain access token",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{authUrl}}}/oauth/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 980,
        "y": 380,
        "wires": [
            [
                "5a1a2730706a9b7e"
            ]
        ]
    },
    {
        "id": "91dcb054225e4d67",
        "type": "function",
        "z": "499e621228906275",
        "name": "Obtain access token",
        "func": "var scope = context.global.get(\"scope\");\nmsg.authUrl = context.global.get(\"authUrl\");\nvar clientId = context.global.get(\"clientId\");\nvar clientSecret = context.global.get(\"clientSecret\");\nvar base64Credentials = Buffer.from(`${clientId}:${clientSecret}`).toString('base64');\nvar formData = {\n    grant_type : \"client_credentials\",\n    scope : scope\n};\n\nvar formDataString = Object.keys(formData)\n    .map(function (key) {\n        return encodeURIComponent(key) + '=' + encodeURIComponent(formData[key]);\n    })\n    .join('&');\n\nmsg.headers = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Authorization': `Basic ${base64Credentials}`\n}\n\n\nmsg.payload = formDataString;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 200,
        "wires": [
            [
                "b479694fdfe651af"
            ]
        ]
    },
    {
        "id": "b479694fdfe651af",
        "type": "http request",
        "z": "499e621228906275",
        "name": "Obtain access token",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{authUrl}}}/oauth/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 980,
        "y": 200,
        "wires": [
            [
                "7d0b26313fbaf9ea"
            ]
        ]
    },
    {
        "id": "76ba0646fd05b145",
        "type": "http request",
        "z": "499e621228906275",
        "name": "Orders",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/me/orders?sort=createdAt desc&limit=500",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 930,
        "y": 1320,
        "wires": [
            [
                "0371b5c5012fa756"
            ]
        ]
    },
    {
        "id": "0371b5c5012fa756",
        "type": "http response",
        "z": "499e621228906275",
        "name": "Orders",
        "statusCode": "",
        "headers": {},
        "x": 1190,
        "y": 1320,
        "wires": []
    },
    {
        "id": "67a6291f48068a41",
        "type": "function",
        "z": "499e621228906275",
        "name": "Orders",
        "func": "var accessToken = msg.req.headers.accesstoken;\nmsg.projectKey = context.global.get(\"projectKey\");\nmsg.apiUrl = context.global.get(\"apiUrl\");\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Authorization' : 'Bearer '+ accessToken\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1320,
        "wires": [
            [
                "76ba0646fd05b145"
            ]
        ]
    },
    {
        "id": "002b6dcfd63ee4d9",
        "type": "http request",
        "z": "499e621228906275",
        "name": "Order",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/me/orders/{{{orderId}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 930,
        "y": 1420,
        "wires": [
            [
                "33b69f8b58d9c44d"
            ]
        ]
    },
    {
        "id": "33b69f8b58d9c44d",
        "type": "http response",
        "z": "499e621228906275",
        "name": "Order",
        "statusCode": "",
        "headers": {},
        "x": 1190,
        "y": 1420,
        "wires": []
    },
    {
        "id": "559899a54cb68f16",
        "type": "function",
        "z": "499e621228906275",
        "name": "Order",
        "func": "var accessToken = msg.req.headers.accesstoken;\nmsg.projectKey = context.global.get(\"projectKey\");\nmsg.apiUrl = context.global.get(\"apiUrl\");\nmsg.orderId = msg.req.query.orderId;\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Authorization' : 'Bearer '+ accessToken\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1420,
        "wires": [
            [
                "002b6dcfd63ee4d9"
            ]
        ]
    },
    {
        "id": "464d147e20ad50f5",
        "type": "http request",
        "z": "499e621228906275",
        "name": "Product",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/products/{{{productId}}}?where=masterData%28published%3Dtrue%29",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 1460,
        "y": 480,
        "wires": [
            [
                "b71c3312b77d230a",
                "67444b138eedda24"
            ]
        ]
    },
    {
        "id": "67444b138eedda24",
        "type": "http response",
        "z": "499e621228906275",
        "name": "Product",
        "statusCode": "",
        "headers": {},
        "x": 1940,
        "y": 480,
        "wires": []
    },
    {
        "id": "3782bbce797f3e44",
        "type": "function",
        "z": "499e621228906275",
        "name": "Product",
        "func": "var accessToken = msg.payload.access_token;\nmsg.projectKey = context.global.get(\"projectKey\");\nmsg.apiUrl = context.global.get(\"apiUrl\");\nmsg.productId = msg.req.query.productId;\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Authorization' : 'Bearer '+ accessToken\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 480,
        "wires": [
            [
                "464d147e20ad50f5"
            ]
        ]
    },
    {
        "id": "55ec399cd332a633",
        "type": "function",
        "z": "499e621228906275",
        "name": "Obtain access token",
        "func": "var scope = context.global.get(\"scope\");\nmsg.authUrl = context.global.get(\"authUrl\");\nvar clientId = context.global.get(\"clientId\");\nvar clientSecret = context.global.get(\"clientSecret\");\nvar base64Credentials = Buffer.from(`${clientId}:${clientSecret}`).toString('base64');\nvar formData = {\n    grant_type : \"client_credentials\",\n    scope : scope\n};\n\nvar formDataString = Object.keys(formData)\n    .map(function (key) {\n        return encodeURIComponent(key) + '=' + encodeURIComponent(formData[key]);\n    })\n    .join('&');\n\nmsg.headers = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Authorization': `Basic ${base64Credentials}`\n}\n\n\nmsg.payload = formDataString;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 480,
        "wires": [
            [
                "b7ebf21a8e285ac6"
            ]
        ]
    },
    {
        "id": "b7ebf21a8e285ac6",
        "type": "http request",
        "z": "499e621228906275",
        "name": "Obtain access token",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{authUrl}}}/oauth/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 980,
        "y": 480,
        "wires": [
            [
                "3782bbce797f3e44"
            ]
        ]
    },
    {
        "id": "b71c3312b77d230a",
        "type": "function",
        "z": "499e621228906275",
        "d": true,
        "name": "Standardizing Response",
        "func": "function convertData(inputData) {\n    return {\n        products: inputData.results.map((result) => {\n            const productId = result.id;\n            const productImages = result.masterData.current.masterVariant.images.map((image, imageIndex) => {\n                return {\n                    url: image.url,\n                };\n            });\n\n            const masterVariant = {\n                id: result.masterData.current.masterVariant.id,\n                price: result.masterData.current.masterVariant.prices[0].value.centAmount,\n                currencyCode: result.masterData.current.masterVariant.prices[0].value.currencyCode,\n            };\n\n            const variants = result.masterData.current.variants.map((variant) => {\n                const variantData = {\n                    id: variant.id,\n                    price: variant.prices[0].value.centAmount ,\n                    currencyCode: variant.prices[0].value.currencyCode,\n                };\n                return variantData;\n            });\n\n            // Include the master variant in the variants array\n            const allVariants = [masterVariant, ...variants];\n\n            return {\n                id: productId,\n                name: result.masterData.current.name.en || result.masterData.current.name[\"en-US\"],\n                images: productImages,\n                variants: allVariants,\n            };\n        }),\n    };\n}\n\n// Example input data\nconst inputData = msg.payload;\n\n\n// Convert the input data to the desired format using the function\nconst result = convertData(inputData);\n\n\n\nmsg.payload=result;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 440,
        "wires": [
            [
                "67444b138eedda24"
            ]
        ]
    },
    {
        "id": "7c69890375705b51",
        "type": "http request",
        "z": "499e621228906275",
        "name": "Get Customer Cart",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/me/active-cart",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 1010,
        "y": 580,
        "wires": [
            [
                "94cb94ca8c548933"
            ]
        ]
    },
    {
        "id": "53e516df9d5b6da2",
        "type": "http response",
        "z": "499e621228906275",
        "name": "Get Customer Cart",
        "statusCode": "",
        "headers": {},
        "x": 1410,
        "y": 580,
        "wires": []
    },
    {
        "id": "3d37633bafdf5124",
        "type": "function",
        "z": "499e621228906275",
        "name": "Get Customer Cart",
        "func": "var accessToken = msg.req.headers.accesstoken;\nmsg.projectKey = context.global.get(\"projectKey\");\nmsg.apiUrl = context.global.get(\"apiUrl\");\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Authorization' : 'Bearer '+ accessToken,\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 580,
        "wires": [
            [
                "7c69890375705b51"
            ]
        ]
    },
    {
        "id": "e818f7deddeb55da",
        "type": "http request",
        "z": "499e621228906275",
        "name": "Create Customer Cart",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/me/carts",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 1020,
        "y": 660,
        "wires": [
            [
                "d89e67e2543031bc"
            ]
        ]
    },
    {
        "id": "5d66a9f074fb6316",
        "type": "http response",
        "z": "499e621228906275",
        "name": "Create Customer Cart2",
        "statusCode": "",
        "headers": {},
        "x": 1950,
        "y": 680,
        "wires": []
    },
    {
        "id": "5b4cabd75901654c",
        "type": "function",
        "z": "499e621228906275",
        "name": "Create Customer Cart",
        "func": "var accessToken = msg.req.headers.accesstoken;\nmsg.projectKey = context.global.get(\"projectKey\");\nmsg.apiUrl = context.global.get(\"apiUrl\");\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Authorization' : 'Bearer '+ accessToken\n};\nmsg.payload = {\n  \"currency\": \"EUR\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 660,
        "wires": [
            [
                "e818f7deddeb55da"
            ]
        ]
    },
    {
        "id": "94cb94ca8c548933",
        "type": "function",
        "z": "499e621228906275",
        "name": "function 36",
        "func": "// Extract necessary information from the original payload\nconst cartId = msg.payload.id;\nconst lines = msg.payload.lineItems.map(lineItem => {\n    return {\n        id: lineItem.id,\n        quantity: lineItem.quantity,\n        linePrice: lineItem.totalPrice.centAmount,\n        productVariant: {\n            id: lineItem.productId,\n            name: lineItem.name.en, // You can adjust this based on your data structure\n            price: lineItem.price.value.centAmount,\n            currencyCode: lineItem.price.value.currencyCode,\n            images: lineItem.variant.images.map(image => image.url)\n        }\n    };\n});\n\n// Calculate total and totalQuantity\nconst total = msg.payload.totalPrice.centAmount;\nconst currencyCode = msg.payload.totalPrice.currencyCode;\nconst totalQuantity = msg.payload.totalLineItemQuantity;\n\n// Create the new response structure\nconst newResponse = {\n    cart: {\n        id: cartId,\n        lines: lines,\n        total: total,\n        currencyCode: currencyCode,\n        totalQuantity: totalQuantity\n    }\n};\n\n// Update the msg.payload with the new response\nmsg.payload = newResponse;\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 580,
        "wires": [
            [
                "53e516df9d5b6da2"
            ]
        ]
    },
    {
        "id": "635101e177691b45",
        "type": "function",
        "z": "499e621228906275",
        "name": "function 37",
        "func": "// Extract relevant information from msg.payload\nconst cartId = msg.payload.id;\nconst lines = msg.payload.lineItems.map(lineItem => {\n    return {\n        id: lineItem.id,\n        quantity: lineItem.quantity,\n        linePrice: lineItem.totalPrice.centAmount,\n        productVariant: {\n            id: lineItem.productId,\n            name: lineItem.name.en, // Assuming English name is available\n            price: lineItem.price.value.centAmount,\n            currencyCode: lineItem.price.value.currencyCode,\n            images: lineItem.productType.images\n        }\n    };\n});\n\nconst total = msg.payload.totalPrice.centAmount;\nconst currencyCode = msg.payload.totalPrice.currencyCode;\nconst totalQuantity = msg.payload.totalLineItemQuantity;\n\n// Build the modified response\nconst modifiedResponse = {\n    cart: {\n        id: cartId,\n        lines: lines,\n        total: total,\n        currencyCode: currencyCode,\n        totalQuantity: totalQuantity\n    }\n};\n\n// Set the modified response in msg.payload\nmsg.payload = modifiedResponse;\n\n// Continue with the modified payload\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 680,
        "wires": [
            [
                "5d66a9f074fb6316"
            ]
        ]
    },
    {
        "id": "d89e67e2543031bc",
        "type": "function",
        "z": "499e621228906275",
        "name": "function 38",
        "func": "msg.cartID = msg.payload.id\nmsg.createCart = msg.payload;\nnode.warn(msg.cartID);\nvar accessToken = msg.req.headers.accesstoken;\nmsg.projectKey = context.global.get(\"projectKey\");\nmsg.apiUrl = context.global.get(\"apiUrl\");\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Authorization' : 'Bearer '+ accessToken\n};\n\nvar payload = {\n  \"version\": 1,\n  \"actions\": [{\n    \"action\": \"addLineItem\",\n    \"productId\": msg.req.body.productId,\n    \"variantId\": msg.req.body.variantId,\n    \"quantity\": msg.req.body.quantity\n  }\n  ]\n}\n\nmsg.payload = payload;\n// node.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 660,
        "wires": [
            [
                "db4cb9a1992a61ff"
            ]
        ]
    },
    {
        "id": "db4cb9a1992a61ff",
        "type": "http request",
        "z": "499e621228906275",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/me/carts/{{{cartID}}}",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 1390,
        "y": 660,
        "wires": [
            [
                "0b50eeca9334dbc8"
            ]
        ]
    },
    {
        "id": "22e5f4c8aed9be86",
        "type": "function",
        "z": "499e621228906275",
        "name": "function 39",
        "func": "var accessToken = msg.req.headers.accesstoken;\nmsg.projectKey = context.global.get(\"projectKey\");\nmsg.apiUrl = context.global.get(\"apiUrl\");\nmsg.cartID = msg.req.body.cartId;\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Authorization' : 'Bearer '+ accessToken\n};\n\nlet payload = {\n    \"version\": 7,\n    \"actions\": [\n        {\n            \"action\" : \"removeLineItem\",\n            \"lineItemId\" : msg.req.body.lineItemId\n        }\n         \n    ]\n\n}\n\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 940,
        "wires": [
            [
                "df308a86e36fd638"
            ]
        ]
    },
    {
        "id": "a326ed4546d3c20c",
        "type": "http response",
        "z": "499e621228906275",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1470,
        "y": 940,
        "wires": []
    },
    {
        "id": "df308a86e36fd638",
        "type": "http request",
        "z": "499e621228906275",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/carts/{{{cartID}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 930,
        "y": 940,
        "wires": [
            [
                "d349e8285986446b"
            ]
        ]
    },
    {
        "id": "b07b8556eefdb6b7",
        "type": "function",
        "z": "499e621228906275",
        "name": "function 41",
        "func": "var accessToken = msg.req.headers.accesstoken;\nmsg.projectKey = context.global.get(\"projectKey\");\nmsg.apiUrl = context.global.get(\"apiUrl\");\nmsg.cartID = msg.req.body.cartId;\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Authorization' : 'Bearer '+ accessToken\n};\n\nlet payload = {\n   \"version\": 4,\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemQuantity\",\n            \"lineItemId\" : msg.req.body.lineItemId,\n            \"quantity\" : msg.req.body.quantity\n          }\n    ]\n}\n\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 780,
        "wires": [
            [
                "2cf4c7fca3da9c31"
            ]
        ]
    },
    {
        "id": "573bc9660eeeb670",
        "type": "http response",
        "z": "499e621228906275",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1450,
        "y": 800,
        "wires": []
    },
    {
        "id": "2cf4c7fca3da9c31",
        "type": "http request",
        "z": "499e621228906275",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/carts/{{{cartID}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 930,
        "y": 780,
        "wires": [
            [
                "c91c54a5fd635344"
            ]
        ]
    },
    {
        "id": "61e5494bf9f5d72c",
        "type": "function",
        "z": "499e621228906275",
        "name": "function 42",
        "func": "// Input: msg.payload\nvar inputCart = msg.payload;\n\n// Output: modifiedCart\nvar modifiedCart = {\n    cart: {\n        id: inputCart.id,\n        lines: [],\n        total: inputCart.totalPrice.centAmount / 100, // converting cents to currency\n        currencyCode: inputCart.totalPrice.currencyCode,\n        totalQuantity: inputCart.totalLineItemQuantity\n    }\n};\n\n// Iterate through lineItems in the inputCart\nfor (var i = 0; i < inputCart.lineItems.length; i++) {\n    var lineItem = inputCart.lineItems[i];\n    \n    // Construct each line in the modifiedCart\n    var line = {\n        id: lineItem.id,\n        quantity: lineItem.quantity,\n        linePrice: lineItem.totalPrice.centAmount / 100, // converting cents to currency\n        productVariant: {\n            id: lineItem.variant.id,\n            name: lineItem.name.en, // assuming 'en' for English name\n            price: lineItem.price.value.centAmount / 100, // converting cents to currency\n            currencyCode: lineItem.price.value.currencyCode,\n            images: lineItem.variant.images\n        }\n    };\n\n    // Add the line to the modifiedCart\n    modifiedCart.cart.lines.push(line);\n}\n\n// Output the modifiedCart\nmsg.payload = modifiedCart;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 800,
        "wires": [
            [
                "573bc9660eeeb670"
            ]
        ]
    },
    {
        "id": "45225a451702cf69",
        "type": "function",
        "z": "499e621228906275",
        "name": "function 43",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 940,
        "wires": [
            [
                "a326ed4546d3c20c"
            ]
        ]
    },
    {
        "id": "d349e8285986446b",
        "type": "switch",
        "z": "499e621228906275",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "409",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1110,
        "y": 940,
        "wires": [
            [
                "af78a742996daae9"
            ],
            [
                "45225a451702cf69"
            ]
        ]
    },
    {
        "id": "af78a742996daae9",
        "type": "function",
        "z": "499e621228906275",
        "name": "function 48",
        "func": "var version1 = msg.payload.errors[0].currentVersion;\n\n\nvar accessToken = msg.req.headers.accesstoken;\nmsg.projectKey = context.global.get(\"projectKey\");\nmsg.apiUrl = context.global.get(\"apiUrl\");\nmsg.cartID = msg.req.body.cartId;\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Authorization' : 'Bearer '+ accessToken\n};\n\nlet payload = {\n    \"version\": version1,\n    \"actions\": [\n        {\n            \"action\" : \"removeLineItem\",\n            \"lineItemId\" : msg.req.body.lineItemId\n        }\n         \n    ]\n\n}\n\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 880,
        "wires": [
            [
                "51c15f50e57995cc"
            ]
        ]
    },
    {
        "id": "c91c54a5fd635344",
        "type": "switch",
        "z": "499e621228906275",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "409",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1110,
        "y": 780,
        "wires": [
            [
                "cab3a0f3a283000b"
            ],
            [
                "61e5494bf9f5d72c"
            ]
        ]
    },
    {
        "id": "cab3a0f3a283000b",
        "type": "function",
        "z": "499e621228906275",
        "name": "function 49",
        "func": "var version1 = msg.payload.errors[0].currentVersion;\n\nvar accessToken = msg.req.headers.accesstoken;\nmsg.projectKey = context.global.get(\"projectKey\");\nmsg.apiUrl = context.global.get(\"apiUrl\");\nmsg.cartID = msg.req.body.cartId;\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Authorization' : 'Bearer '+ accessToken\n};\n\nlet payload = {\n   \"version\": version1,\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemQuantity\",\n            \"lineItemId\" : msg.req.body.lineItemId,\n            \"quantity\" : msg.req.body.quantity\n          }\n    ]\n}\n\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 740,
        "wires": [
            [
                "5bf90a53c7c9e837"
            ]
        ]
    },
    {
        "id": "5bf90a53c7c9e837",
        "type": "http request",
        "z": "499e621228906275",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/carts/{{{cartID}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1450,
        "y": 740,
        "wires": [
            [
                "61e5494bf9f5d72c"
            ]
        ]
    },
    {
        "id": "51c15f50e57995cc",
        "type": "http request",
        "z": "499e621228906275",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/carts/{{{cartID}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1450,
        "y": 880,
        "wires": [
            [
                "45225a451702cf69"
            ]
        ]
    },
    {
        "id": "0b50eeca9334dbc8",
        "type": "switch",
        "z": "499e621228906275",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "409",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1530,
        "y": 660,
        "wires": [
            [
                "b5f283d2297cafde"
            ],
            [
                "635101e177691b45"
            ]
        ]
    },
    {
        "id": "b5f283d2297cafde",
        "type": "function",
        "z": "499e621228906275",
        "name": "function 50",
        "func": "var version1 = msg.payload.errors[0].currentVersion;\n\nmsg.cartID = msg.payload.id\nmsg.createCart = msg.payload;\nnode.warn(msg.cartID);\nvar accessToken = msg.req.headers.accesstoken;\nmsg.projectKey = context.global.get(\"projectKey\");\nmsg.apiUrl = context.global.get(\"apiUrl\");\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Authorization' : 'Bearer '+ accessToken\n};\n\nvar payload = {\n  \"version\": version1,\n  \"actions\": [{\n    \"action\": \"addLineItem\",\n    \"productId\": msg.req.body.productId,\n    \"variantId\": msg.req.body.variantId,\n    \"quantity\": msg.req.body.quantity\n  }\n  ]\n}\n\nmsg.payload = payload;\n// node.warn(msg.payload);\nreturn msg;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 620,
        "wires": [
            [
                "5d4bfa92ae698bbe"
            ]
        ]
    },
    {
        "id": "5d4bfa92ae698bbe",
        "type": "http request",
        "z": "499e621228906275",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/me/carts/{{{cartID}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1870,
        "y": 620,
        "wires": [
            [
                "635101e177691b45"
            ]
        ]
    },
    {
        "id": "b73bba156a652101",
        "type": "switch",
        "z": "499e621228906275",
        "name": "Route",
        "property": "req.params.api",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "login",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "products",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "signup",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "categories",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "category-products",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "product",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cart",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "checkout",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "orders",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "order",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 10,
        "x": 210,
        "y": 660,
        "wires": [
            [
                "d2b8735dc4c42f6a"
            ],
            [
                "7cf2013439a3e298"
            ],
            [
                "91dcb054225e4d67"
            ],
            [
                "7bf8847dc8e80bf3"
            ],
            [
                "9e36c4e7d0082e50"
            ],
            [
                "55ec399cd332a633"
            ],
            [
                "1927b0eb64ac4294"
            ],
            [
                "60c211058b25c55b"
            ],
            [
                "67a6291f48068a41"
            ],
            [
                "559899a54cb68f16"
            ]
        ]
    },
    {
        "id": "1927b0eb64ac4294",
        "type": "switch",
        "z": "499e621228906275",
        "name": "Cart",
        "property": "req.method",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "GET",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "POST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PUT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 510,
        "y": 680,
        "wires": [
            [
                "3d37633bafdf5124"
            ],
            [
                "5b4cabd75901654c"
            ],
            [
                "b07b8556eefdb6b7"
            ],
            [
                "22e5f4c8aed9be86"
            ]
        ]
    },
    {
        "id": "81b35ab5713dc59a",
        "type": "comment",
        "z": "499e621228906275",
        "name": "standard function remaining",
        "info": "",
        "x": 1380,
        "y": 1000,
        "wires": []
    },
    {
        "id": "2a3e87b6a773c1e4",
        "type": "comment",
        "z": "499e621228906275",
        "name": "standard function remaining",
        "info": "",
        "x": 1120,
        "y": 1280,
        "wires": []
    },
    {
        "id": "8fa4213d5cd35ac9",
        "type": "http request",
        "z": "499e621228906275",
        "name": "Obtain access token",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{authUrl}}}/oauth/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1600,
        "y": 1180,
        "wires": [
            [
                "3a06e5014ac7f543"
            ]
        ]
    },
    {
        "id": "d4cb6306040908f9",
        "type": "function",
        "z": "499e621228906275",
        "name": "Obtain access token",
        "func": "var scope = context.global.get(\"scope\");\nmsg.authUrl = context.global.get(\"authUrl\");\nvar clientId = context.global.get(\"clientId\");\nvar clientSecret = context.global.get(\"clientSecret\");\nvar base64Credentials = Buffer.from(`${clientId}:${clientSecret}`).toString('base64');\nvar formData = {\n    grant_type : \"client_credentials\",\n    scope : scope\n};\n\nvar formDataString = Object.keys(formData)\n    .map(function (key) {\n        return encodeURIComponent(key) + '=' + encodeURIComponent(formData[key]);\n    })\n    .join('&');\n\nmsg.headers = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Authorization': `Basic ${base64Credentials}`\n}\n\n\nmsg.payload = formDataString;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1180,
        "wires": [
            [
                "8fa4213d5cd35ac9"
            ]
        ]
    },
    {
        "id": "60c211058b25c55b",
        "type": "function",
        "z": "499e621228906275",
        "name": "Set Shipping Address",
        "func": "var accessToken = msg.req.headers.accesstoken;\nmsg.projectKey = context.global.get(\"projectKey\");\nmsg.apiUrl = context.global.get(\"apiUrl\");\nmsg.cartId = msg.req.body.cartId;\n\nvar payload = {\n    \"version\": 4,\n    \"actions\": [\n        {\n            \"action\": \"setShippingAddress\",\n            \"address\": {\n                \"firstName\": msg.req.body.shippingAddress.firstName,\n                \"lastName\": msg.req.body.shippingAddress.lastName,\n                \"streetName\": msg.req.body.shippingAddress.streetLine1 + \" \" + msg.req.body.shippingAddress.streetLine2,\n                \"postalCode\": msg.req.body.shippingAddress.postalCode,\n                \"city\": msg.req.body.shippingAddress.city,\n                \"state\": msg.req.body.shippingAddress.state,\n                \"country\": msg.req.body.shippingAddress.countryCode,\n                \"mobile\": msg.req.body.shippingAddress.phoneNumber\n\n            }\n        }\n    ]\n}\n\n\n\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer ' + accessToken\n};\nmsg.payload= payload;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1120,
        "wires": [
            [
                "c0d436204b110930"
            ]
        ]
    },
    {
        "id": "c0d436204b110930",
        "type": "http request",
        "z": "499e621228906275",
        "name": "Set Shipping Address",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/me/carts/{{{cartId}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 980,
        "y": 1120,
        "wires": [
            [
                "f36b5841206c85f8"
            ]
        ]
    },
    {
        "id": "ef1a7d1c7534d5a9",
        "type": "http request",
        "z": "499e621228906275",
        "name": "CreateOrder",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/orders",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1990,
        "y": 1180,
        "wires": [
            [
                "547e7bb7f4c76d4e"
            ]
        ]
    },
    {
        "id": "3a06e5014ac7f543",
        "type": "function",
        "z": "499e621228906275",
        "name": "CreateOrder",
        "func": "msg.auth = msg.payload.access_token;\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Authorization' : 'Bearer '+ msg.auth\n};\n\nlet payload = {\n  \"cart\" : {\n    \"id\" : msg.req.body.cartId,\n    \"typeId\" : \"cart\"\n  },\n  \"version\" : 8\n}\n\n\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1180,
        "wires": [
            [
                "ef1a7d1c7534d5a9"
            ]
        ]
    },
    {
        "id": "f36b5841206c85f8",
        "type": "switch",
        "z": "499e621228906275",
        "name": "switch",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "409",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1170,
        "y": 1120,
        "wires": [
            [
                "af6d82344af7ab77"
            ],
            [
                "d4cb6306040908f9"
            ]
        ]
    },
    {
        "id": "ed4489ef59da0c91",
        "type": "http request",
        "z": "499e621228906275",
        "name": "Set Shipping Address",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/me/carts/{{{cartID}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1600,
        "y": 1100,
        "wires": [
            [
                "d4cb6306040908f9"
            ]
        ]
    },
    {
        "id": "af6d82344af7ab77",
        "type": "function",
        "z": "499e621228906275",
        "name": "Set Shipping Address",
        "func": "var accessToken = msg.req.headers.accesstoken;\nvar correctVersion = msg.payload.errors[0].currentVersion;\n\nmsg.projectKey = context.global.get(\"projectKey\");\nmsg.apiUrl = context.global.get(\"apiUrl\");\n\nvar payload = {\n    \"version\": correctVersion,\n    \"actions\": [\n        {\n            \"action\": \"setShippingAddress\",\n            \"address\": {\n                \"firstName\": msg.req.body.shippingAddress.firstName,\n                \"lastName\": msg.req.body.shippingAddress.lastName,\n                \"streetName\": msg.req.body.shippingAddress.streetLine1 + \" \" + msg.req.body.shippingAddress.streetLine2,\n                \"postalCode\": msg.req.body.shippingAddress.postalCode,\n                \"city\": msg.req.body.shippingAddress.city,\n                \"state\": msg.req.body.shippingAddress.state,\n                \"country\": msg.req.body.shippingAddress.countryCode,\n                \"mobile\": msg.req.body.shippingAddress.phoneNumber\n\n            }\n        }\n    ]\n}\n\n\n\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer ' + accessToken\n};\n\nmsg.payload = payload;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1100,
        "wires": [
            [
                "ed4489ef59da0c91"
            ]
        ]
    },
    {
        "id": "547e7bb7f4c76d4e",
        "type": "switch",
        "z": "499e621228906275",
        "name": "switch",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "409",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "201",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2150,
        "y": 1180,
        "wires": [
            [
                "d1d98517b012404d"
            ],
            [
                "e25394a90d9c1f54"
            ]
        ]
    },
    {
        "id": "d1d98517b012404d",
        "type": "function",
        "z": "499e621228906275",
        "name": "CreateOrder",
        "func": "var correctVersion = msg.payload.errors[0].currentVersion;\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Authorization' : 'Bearer '+ msg.auth\n};\n\nlet payload = {\n  \"cart\" : {\n    \"id\" : msg.req.body.cartId,\n    \"typeId\" : \"cart\"\n  },\n  \"version\" : correctVersion\n}\n\n\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 1140,
        "wires": [
            [
                "bf22c86425e05ce1"
            ]
        ]
    },
    {
        "id": "bf22c86425e05ce1",
        "type": "http request",
        "z": "499e621228906275",
        "name": "CreateOrder",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{apiUrl}}}/{{{projectKey}}}/orders",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2490,
        "y": 1140,
        "wires": [
            [
                "e25394a90d9c1f54"
            ]
        ]
    },
    {
        "id": "e25394a90d9c1f54",
        "type": "function",
        "z": "499e621228906275",
        "name": "Standardizing Response",
        "func": "\nif (msg.payload.id) {\n    // Input timestamp\n    const inputTimestamp = msg.payload.createdAt;\n\n    // Convert the input timestamp to a JavaScript Date object\n    const date = new Date(inputTimestamp);\n\n    // Add 5 days to the date\n    date.setDate(date.getDate() + 5);\n\n    // Define arrays for day and month names\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    // Format the date as \"Day DD Month YYYY\"\n    const formattedDate = `${days[date.getDay()]}  ${date.getDate()} ${months[date.getMonth()]} ${date.getFullYear()}`;\n\n    //console.log(formattedDate); // Output: \"Sunday  5 November 2023\"\n    msg.statusCode = 200;\n    msg.payload = {\n        orderId: msg.payload.id,\n        expectedDelivery: formattedDate\n    }\n\n\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1260,
        "wires": [
            [
                "ee19f13ea017d9e6"
            ]
        ]
    },
    {
        "id": "ee19f13ea017d9e6",
        "type": "http response",
        "z": "499e621228906275",
        "name": "Checkout",
        "statusCode": "",
        "headers": {},
        "x": 2660,
        "y": 1260,
        "wires": []
    },
    {
        "id": "d9d6a7dc62eb3432",
        "type": "debug",
        "z": "5a0bbc7a3cc218b6",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 300,
        "wires": []
    },
    {
        "id": "fdd65246c838be6d",
        "type": "catch",
        "z": "5a0bbc7a3cc218b6",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 940,
        "y": 300,
        "wires": [
            [
                "d9d6a7dc62eb3432"
            ]
        ]
    },
    {
        "id": "fa1548c26f26d698",
        "type": "http in",
        "z": "5a0bbc7a3cc218b6",
        "name": "",
        "url": "/master/:api",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 440,
        "wires": [
            [
                "f120e8df3acfa3a9",
                "acf25d0d5a789491",
                "1797b28346399138"
            ]
        ]
    },
    {
        "id": "66cb41d9aa79efe1",
        "type": "http in",
        "z": "5a0bbc7a3cc218b6",
        "name": "",
        "url": "/master/:api",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "ae8702c7654ee771",
                "81e5c7d4e9994c6e",
                "1797b28346399138"
            ]
        ]
    },
    {
        "id": "fbab0dc0a57ecccf",
        "type": "http in",
        "z": "5a0bbc7a3cc218b6",
        "name": "",
        "url": "/master/:api",
        "method": "put",
        "upload": true,
        "swaggerDoc": "",
        "x": 160,
        "y": 560,
        "wires": [
            [
                "1797b28346399138"
            ]
        ]
    },
    {
        "id": "28954b384fbde21c",
        "type": "http in",
        "z": "5a0bbc7a3cc218b6",
        "name": "",
        "url": "/master/:api",
        "method": "delete",
        "upload": true,
        "swaggerDoc": "",
        "x": 170,
        "y": 620,
        "wires": [
            [
                "1797b28346399138"
            ]
        ]
    },
    {
        "id": "29b69931b9f177cf",
        "type": "inject",
        "z": "5a0bbc7a3cc218b6",
        "name": "Enviroment Variable Inject",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "{     \"email\": \"sameer@cnetric.com\",     \"password\": \"password\" }",
        "payloadType": "json",
        "x": 190,
        "y": 40,
        "wires": [
            [
                "fcc2e520819ee1cf"
            ]
        ]
    },
    {
        "id": "f796419e144a9965",
        "type": "function",
        "z": "5a0bbc7a3cc218b6",
        "name": "Enviroment Variables",
        "func": "context.global.set(\"scope\", msg.payload.commerceToolsCreds.scope);\ncontext.global.set(\"projectKey\", msg.payload.commerceToolsCreds.projectKey);\ncontext.global.set(\"clientId\", msg.payload.commerceToolsCreds.clientId);\ncontext.global.set(\"clientSecret\", msg.payload.commerceToolsCreds.clientSecret);\ncontext.global.set(\"apiUrl\", msg.payload.commerceToolsCreds.apiUrl);\ncontext.global.set(\"authUrl\", msg.payload.commerceToolsCreds.authUrl);\n//node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "32f84180a6630c1d",
        "type": "http request",
        "z": "5a0bbc7a3cc218b6",
        "name": "Get Creds From Xano (CT)",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://x8ki-letl-twmt.n7.xano.io/api:IXwazaxs/commerceToolsCreds",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "msg",
                "valueValue": "auth"
            }
        ],
        "x": 900,
        "y": 40,
        "wires": [
            [
                "f796419e144a9965"
            ]
        ]
    },
    {
        "id": "b254ac494397cb0b",
        "type": "inject",
        "z": "5a0bbc7a3cc218b6",
        "name": "Enviroment Variable Inject",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "{     \"email\": \"sameer@cnetric.com\",     \"password\": \"password\" }",
        "payloadType": "json",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "27bb7ce3df3cfddc"
            ]
        ]
    },
    {
        "id": "b7c4573eea20a010",
        "type": "function",
        "z": "5a0bbc7a3cc218b6",
        "name": "Enviroment Variables",
        "func": "context.global.set(\"shopUrl\", msg.payload.vendureShopDomain);\n//node.warn(msg.payload.vendureShopDomain);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "fe0afdea0d32c193",
        "type": "http request",
        "z": "5a0bbc7a3cc218b6",
        "name": "Get Creds From Xano (Vendure)",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://x8ki-letl-twmt.n7.xano.io/api:IXwazaxs/vendureCreds",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "msg",
                "valueValue": "auth"
            }
        ],
        "x": 910,
        "y": 100,
        "wires": [
            [
                "b7c4573eea20a010"
            ]
        ]
    },
    {
        "id": "27bb7ce3df3cfddc",
        "type": "http request",
        "z": "5a0bbc7a3cc218b6",
        "name": "Tenant Login",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://x8ki-letl-twmt.n7.xano.io/api:IXwazaxs/auth/login",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 100,
        "wires": [
            [
                "f7a0df8ca3f12e31"
            ]
        ]
    },
    {
        "id": "f7a0df8ca3f12e31",
        "type": "function",
        "z": "5a0bbc7a3cc218b6",
        "name": "Auth Token",
        "func": "msg.auth = \"Bearer \" + msg.payload.authToken;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 100,
        "wires": [
            [
                "fe0afdea0d32c193"
            ]
        ]
    },
    {
        "id": "224fb1d9ce9649e5",
        "type": "comment",
        "z": "5a0bbc7a3cc218b6",
        "name": "API Triggers URI",
        "info": "",
        "x": 160,
        "y": 400,
        "wires": []
    },
    {
        "id": "9fb3f3d77d735059",
        "type": "comment",
        "z": "5a0bbc7a3cc218b6",
        "name": "Commerce Nodes",
        "info": "",
        "x": 650,
        "y": 220,
        "wires": []
    },
    {
        "id": "d8d4f067a76c072c",
        "type": "comment",
        "z": "5a0bbc7a3cc218b6",
        "name": "Getting Shop Creds from Xano DB",
        "info": "",
        "x": 980,
        "y": 160,
        "wires": []
    },
    {
        "id": "f120e8df3acfa3a9",
        "type": "subflow:9bce73fe20ce005e",
        "z": "5a0bbc7a3cc218b6",
        "name": "",
        "x": 610,
        "y": 420,
        "wires": []
    },
    {
        "id": "36a8f21138158de5",
        "type": "comment",
        "z": "5a0bbc7a3cc218b6",
        "name": "Search Nodes",
        "info": "",
        "x": 630,
        "y": 380,
        "wires": []
    },
    {
        "id": "6d6f397def34ec62",
        "type": "subflow:319e0b6f91b1638f",
        "z": "5a0bbc7a3cc218b6",
        "name": "",
        "x": 630,
        "y": 460,
        "wires": []
    },
    {
        "id": "e8c47f962bba2c59",
        "type": "comment",
        "z": "5a0bbc7a3cc218b6",
        "name": "CMS Nodes",
        "info": "",
        "x": 630,
        "y": 540,
        "wires": []
    },
    {
        "id": "f620e567c4a06d59",
        "type": "subflow:6e9d98cac186005b",
        "z": "5a0bbc7a3cc218b6",
        "name": "",
        "x": 630,
        "y": 580,
        "wires": []
    },
    {
        "id": "acf25d0d5a789491",
        "type": "subflow:b6e6b6bb6c12b1cb",
        "z": "5a0bbc7a3cc218b6",
        "name": "",
        "x": 610,
        "y": 620,
        "wires": []
    },
    {
        "id": "d4ced2b964234b71",
        "type": "comment",
        "z": "5a0bbc7a3cc218b6",
        "name": "Payment Nodes",
        "info": "",
        "x": 640,
        "y": 700,
        "wires": []
    },
    {
        "id": "ae8702c7654ee771",
        "type": "subflow:8269f83d98cc79b2",
        "z": "5a0bbc7a3cc218b6",
        "name": "",
        "x": 610,
        "y": 740,
        "wires": []
    },
    {
        "id": "fcc2e520819ee1cf",
        "type": "http request",
        "z": "5a0bbc7a3cc218b6",
        "name": "Tenant Login",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://x8ki-letl-twmt.n7.xano.io/api:IXwazaxs/auth/login",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 40,
        "wires": [
            [
                "1321a98fc9278d34"
            ]
        ]
    },
    {
        "id": "1321a98fc9278d34",
        "type": "function",
        "z": "5a0bbc7a3cc218b6",
        "name": "Auth Token",
        "func": "msg.auth = \"Bearer \" + msg.payload.authToken;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 40,
        "wires": [
            [
                "32f84180a6630c1d"
            ]
        ]
    },
    {
        "id": "81e5c7d4e9994c6e",
        "type": "subflow:3b9cdc59d6ec5dfb",
        "z": "5a0bbc7a3cc218b6",
        "name": "",
        "x": 620,
        "y": 780,
        "wires": []
    },
    {
        "id": "1797b28346399138",
        "type": "subflow:5dd9278f74ef5ab6",
        "z": "5a0bbc7a3cc218b6",
        "name": "",
        "x": 620,
        "y": 260,
        "wires": []
    },
    {
        "id": "8ec8688e148792c8",
        "type": "subflow:499e621228906275",
        "z": "5a0bbc7a3cc218b6",
        "name": "",
        "x": 650,
        "y": 320,
        "wires": []
    },
    {
        "id": "f0cc040d68facfae",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Login",
        "func": "var email = msg.req.body.email;\nvar password = msg.req.body.password;\nmsg.shopUrl = context.global.get(\"shopUrl\");\nconst payload = JSON.stringify({\n  query: `mutation {\n    login(username: \\\"${email}\\\", password: \\\"${password}\\\") {\n      ... on CurrentUser {\n        id\n        identifier\n        channels {\n          id\n          token\n        }\n      }\n      ... on InvalidCredentialsError {\n        errorCode\n        message\n        authenticationError\n      }\n      ... on NotVerifiedError {\n        errorCode\n        message\n      }\n    }\n  }`,\n  variables: {}\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json'\n};\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 180,
        "wires": [
            [
                "f6095e423c43ab78"
            ]
        ]
    },
    {
        "id": "f6095e423c43ab78",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "login",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": true,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 590,
        "y": 180,
        "wires": [
            [
                "673c38a9a8a0dcf5"
            ]
        ]
    },
    {
        "id": "dae541c0905a3cbf",
        "type": "http in",
        "z": "a28b40984e94e443",
        "name": "",
        "url": "/login",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "f0cc040d68facfae"
            ]
        ]
    },
    {
        "id": "66bec2cc4796cc36",
        "type": "http response",
        "z": "a28b40984e94e443",
        "name": "login",
        "statusCode": "",
        "headers": {},
        "x": 1850,
        "y": 180,
        "wires": []
    },
    {
        "id": "673c38a9a8a0dcf5",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Extract Auth Token",
        "func": "// Assuming the msg.payload is stored in a variable called 'msg.payload'\nif (msg.payload && msg.payload.data && msg.payload.data.login) {\n    const loginData = msg.payload.data.login;\n\n    if (loginData.errorCode === \"INVALID_CREDENTIALS_ERROR\") {\n        // Invalid credentials case\n        msg.statusCode = 401;\n        msg.payload = {\n            \"success\": false,\n            \"message\": \"Invalid username or password\",\n            \"error\": \"invalid_credentials\"\n        }\n        // You can handle this case, e.g., show an error message to the user\n    } else {\n        var authToken = msg.headers['vendure-auth-token'];\n        // Handle other cases if needed\n        msg.payload = {\n            \"success\": true,\n            \"message\": \"Login successful\",\n            \"user\": {\n                \"userId\": \"\",\n                \"name\": \"\",\n                \"email\": \"\",\n                \"phoneNumber\" : \"\"\n            },\n            \"token\": authToken\n        }\n    }\n} else {\n    // Handle unexpected msg.payload structure or missing data\n    msg.statusCode = 500;\n    msg.payload = {\n        \"error\": {\n            \"code\": \"500\",\n            \"message\": \"Internal Server Error\",\n            \"details\": \"An unexpected error occurred on the server. Please try again later.\"\n        }\n    }\n}\n\nmsg.loginData = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 180,
        "wires": [
            [
                "e0ef29fd1abf6c80"
            ]
        ]
    },
    {
        "id": "90d652a333df670a",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Get Customer Info",
        "func": "var accessToken = msg.loginData.token;\nconst payload = JSON.stringify({\n  query: `{\n\n    activeCustomer{\n\n        id\n\n        firstName\n\n        lastName\n\n        phoneNumber\n\n        emailAddress\n\n    }\n\n  }`,\n  variables: {}\n});\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 180,
        "wires": [
            [
                "c1138ad21ba10f43"
            ]
        ]
    },
    {
        "id": "c1138ad21ba10f43",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "Get Customer Info",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1430,
        "y": 180,
        "wires": [
            [
                "113de64f07423e06"
            ]
        ]
    },
    {
        "id": "113de64f07423e06",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Standardizing Response",
        "func": "var id=msg.payload.data.activeCustomer.id;\nvar emailAddress = msg.payload.data.activeCustomer.emailAddress;\nvar name = msg.payload.data.activeCustomer.firstName + \" \" + msg.payload.data.activeCustomer.lastName;\nvar phoneNumber = msg.payload.data.activeCustomer.phoneNumber\nmsg.loginData.user.userId = id;\nmsg.loginData.user.name = name;\nmsg.loginData.user.email = emailAddress;\nmsg.loginData.user.phoneNumber = phoneNumber;\nmsg.payload=msg.loginData;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 180,
        "wires": [
            [
                "66bec2cc4796cc36"
            ]
        ]
    },
    {
        "id": "e0ef29fd1abf6c80",
        "type": "switch",
        "z": "a28b40984e94e443",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 990,
        "y": 180,
        "wires": [
            [
                "90d652a333df670a"
            ],
            [
                "11a61c525b89aa51"
            ]
        ]
    },
    {
        "id": "11a61c525b89aa51",
        "type": "http response",
        "z": "a28b40984e94e443",
        "name": "Error",
        "statusCode": "",
        "headers": {},
        "x": 1190,
        "y": 220,
        "wires": []
    },
    {
        "id": "1a623a88a5ee58f8",
        "type": "http in",
        "z": "a28b40984e94e443",
        "name": "",
        "url": "/signup",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 320,
        "wires": [
            [
                "a69cdd65882e6fef"
            ]
        ]
    },
    {
        "id": "399882ae1e567752",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Register Customer",
        "func": "var accessToken = msg.headers['vendure-auth-token'];\nvar firstName = msg.req.body.firstName;\nvar lastName = msg.req.body.lastName;\nvar phoneNumber = msg.req.body.phoneNumber;\nvar emailAddress = msg.req.body.email;\nvar password = msg.req.body.password;\n\n\nconst payload = JSON.stringify({\n  query: `\n   mutation CreateCustomer($input: CreateCustomerInput!, $password: String) {\n  createCustomer(input: $input, password: $password) {\n    ... on Customer {\n      id\n      firstName\n      lastName\n      phoneNumber\n      emailAddress\n    }\n    ... on EmailAddressConflictError {\n      errorCode\n      message\n    }\n  }\n}\n  `,\n  variables: {\n    \"input\": {\n      \"firstName\": firstName,\n      \"lastName\": lastName,\n      \"emailAddress\": emailAddress,\n      \"phoneNumber\": phoneNumber\n    },\n    \"password\": password\n  }\n\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 320,
        "wires": [
            [
                "4318bf25d84754ff"
            ]
        ]
    },
    {
        "id": "4318bf25d84754ff",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "register customer",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/admin-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 990,
        "y": 320,
        "wires": [
            [
                "55ad90e07c83f1a6"
            ]
        ]
    },
    {
        "id": "55ad90e07c83f1a6",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Check Error",
        "func": "\nif (msg.payload && msg.payload.data && msg.payload.data.createCustomer && msg.payload.data.createCustomer.errorCode === \"EMAIL_ADDRESS_CONFLICT_ERROR\") {\n    msg.statusCode = 409;\n    msg.payload = {\n        \"message\": \"Validation error\",\n        \"data\": {\n            \"errors\": [\n                {\n                    \"field\": \"email\",\n                    \"message\": \"Email is already registered.\"\n                }\n            ]\n        }\n    };\n} else {\n    var emailAddress = msg.payload.data.createCustomer.emailAddress;\n    var name = msg.payload.data.createCustomer.firstName + \" \" + msg.payload.data.createCustomer.lastName;\n    var userId = msg.payload.data.createCustomer.id\n    msg.statusCode = 201;\n    msg.payload = {\n        \"message\": \"Signup successful\",\n        \"data\": {\n            \"userId\": userId,\n            \"name\": name,\n            \"email\": emailAddress\n        }\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 320,
        "wires": [
            [
                "8a989bff2fb69a77"
            ]
        ]
    },
    {
        "id": "8a989bff2fb69a77",
        "type": "http response",
        "z": "a28b40984e94e443",
        "name": "Register Customer",
        "statusCode": "",
        "headers": {},
        "x": 1430,
        "y": 320,
        "wires": []
    },
    {
        "id": "a69cdd65882e6fef",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Admin Login",
        "func": "var username = \"superadmin\";\nvar password = \"superadmin\";\nmsg.shopUrl = context.global.get(\"shopUrl\");\nconst payload = JSON.stringify({\n  query: `mutation {\n\n  login(username: \"${username}\", password: \"${password}\", rememberMe: true) {\n\n    ... on CurrentUser {\n\n      id\n\n      identifier\n\n      channels {\n\n        id\n\n        token\n\n        code\n\n        permissions\n\n      }\n\n    }\n\n    \n\n  }\n\n}`,\n  variables: {}\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json'\n};\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 320,
        "wires": [
            [
                "3a42e948b0bdcc1d"
            ]
        ]
    },
    {
        "id": "3a42e948b0bdcc1d",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "Admin Login",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/admin-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 530,
        "y": 320,
        "wires": [
            [
                "399882ae1e567752"
            ]
        ]
    },
    {
        "id": "e92bbb50c871dbdb",
        "type": "http in",
        "z": "a28b40984e94e443",
        "name": "",
        "url": "/categories",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "129d293f7c2bdeb9"
            ]
        ]
    },
    {
        "id": "129d293f7c2bdeb9",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Category Tree",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nconst payload = JSON.stringify({\n  query: `query {\n  collections {\n    items {\n      id\n      name\n      parent {\n        id\n        name\n      }\n      children {\n        id\n        name\n      }\n    }\n  }\n}`,\n  variables: {}\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json'\n};\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 460,
        "wires": [
            [
                "49408c36b176b2ab"
            ]
        ]
    },
    {
        "id": "49408c36b176b2ab",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "Category Tree",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 620,
        "y": 460,
        "wires": [
            [
                "6bfc683546470efa"
            ]
        ]
    },
    {
        "id": "a04fe31b0afec8f3",
        "type": "http in",
        "z": "a28b40984e94e443",
        "name": "",
        "url": "/products",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 600,
        "wires": [
            [
                "8a71b26e198a5451"
            ]
        ]
    },
    {
        "id": "d7f4c9ba30eff5f3",
        "type": "http response",
        "z": "a28b40984e94e443",
        "name": "Category Tree",
        "statusCode": "",
        "headers": {},
        "x": 1100,
        "y": 460,
        "wires": []
    },
    {
        "id": "6bfc683546470efa",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Standardizing Response",
        "func": "const data = msg.payload;\n\n// Create a map to efficiently look up categories by ID\nconst categoryMap = {};\n\n// Populate the category map\ndata.data.collections.items.forEach(category => {\n    categoryMap[category.id] = {\n        id: category.id,\n        name: category.name,\n        children: category.children,\n    };\n});\n\n// Create a function to build the category tree\nfunction buildCategoryTree(categoryId) {\n    const category = categoryMap[categoryId];\n    if (category) {\n        return {\n            id: category.id,\n            name: category.name,\n            children: category.children.map(child => buildCategoryTree(child.id)),\n        };\n    }\n    return null;\n}\n\n// Find the root categories (those with no parent)\nconst rootCategories = data.data.collections.items.filter(category => !categoryMap[category.parent.id]);\n\n// Build the category tree for each root category\nconst categoryTree = rootCategories.map(category => buildCategoryTree(category.id));\n\nmsg.payload = {categories : categoryTree};\n// console.log(JSON.stringify(categoryTree, null, 2));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 460,
        "wires": [
            [
                "d7f4c9ba30eff5f3"
            ]
        ]
    },
    {
        "id": "8a71b26e198a5451",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Products",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nconst payload = JSON.stringify({\n  query: `query Products {\n  products {\n    totalItems\n    items {\n      id\n      name\n      featuredAsset {\n        preview\n      }\n      facetValues{\n        name\n      }\n      variants {\n        id\n        name\n        currencyCode\n        priceWithTax\n        featuredAsset {\n          preview\n        }\n      }\n      optionGroups {\n        name\n        options {\n          name\n        }\n      }\n      collections {\n        id\n        name\n      }\n    }\n  }\n}`,\n  variables: {}\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json'\n};\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 600,
        "wires": [
            [
                "08283243516f0cde"
            ]
        ]
    },
    {
        "id": "08283243516f0cde",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "Products",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 520,
        "y": 600,
        "wires": [
            [
                "ccfec731abee54c4"
            ]
        ]
    },
    {
        "id": "ca4c987f0be04712",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Standardizing Response",
        "func": "// The input data\nconst inputData = msg.payload;\n\n// Initialize an empty array to store the converted products\nconst products = [];\n\n// Loop through the items in the input data\ninputData.data.products.items.forEach((item) => {\n    const product = {\n        id: item.id,\n        name: item.name,\n        images: [\n            {\n                id: item.featuredAsset.id, // Add the image id\n                url: item.featuredAsset.preview\n            }\n            // Add more images here if available\n        ],\n        variants: item.variants.map((variant) => ({\n            id: variant.id,\n            variantName: variant.name,\n            price: variant.priceWithTax / 100, // Assuming the price is in cents (convert to dollars)\n            currencyCode: variant.currencyCode\n\n        }))\n    };\n    products.push(product);\n});\n\n// Create the final result object\nconst result = {\n    products\n};\n\n// Output the result in the desired format\nmsg.payload = result;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 560,
        "wires": [
            [
                "1cd658e2deeac441"
            ]
        ]
    },
    {
        "id": "1cd658e2deeac441",
        "type": "http response",
        "z": "a28b40984e94e443",
        "name": "Products",
        "statusCode": "",
        "headers": {},
        "x": 1000,
        "y": 600,
        "wires": []
    },
    {
        "id": "cdc200cf4d98e1dd",
        "type": "http in",
        "z": "a28b40984e94e443",
        "name": "",
        "url": "/category/products",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 700,
        "wires": [
            [
                "1c4fbfe646ecb54c"
            ]
        ]
    },
    {
        "id": "1c4fbfe646ecb54c",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Category Products",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar categoryId = msg.req.query.categoryId;\nconst payload = JSON.stringify({\n  query: `query Collection($collectionId: ID) {\n  collection(id: $collectionId) {\n    id\n    name\n    productVariants {\n      items {\n        product {\n          id\n          name\n          featuredAsset {\n            id\n            preview\n          }\n          description\n        }\n        id\n        name\n        currencyCode\n        priceWithTax\n      }\n    }\n  }\n}`,\n  variables: {\n    \"collectionId\": categoryId\n  }\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json'\n};\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 700,
        "wires": [
            [
                "6017d2353f967029"
            ]
        ]
    },
    {
        "id": "6017d2353f967029",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "Category Products",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 610,
        "y": 700,
        "wires": [
            [
                "85029add63427148"
            ]
        ]
    },
    {
        "id": "85029add63427148",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Standardizing Response",
        "func": "// Input data\nconst inputData = msg.payload;\n\n// Convert the input data to the desired format\nconst products = inputData.data.collection.productVariants.items.map((item) => {\n    const images = [\n        {\n            id: item.product.featuredAsset.id,\n            url: item.product.featuredAsset.preview\n        }\n        // You can add more images here if available\n    ];\n\n    return {\n        id: item.product.id,\n        name: item.product.name,\n        images,\n        variants: [\n            {\n                id: item.id,\n                price: item.priceWithTax / 100, // Assuming the price is in cents (convert to dollars)\n                currencyCode: item.currencyCode\n            }\n        ]\n    };\n});\n\n// Create the final result object\nconst result = {\n    products\n};\n\n// Output the result in the desired format\n//console.log(JSON.stringify(result, null, 2));\n\nmsg.payload=result;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 700,
        "wires": [
            [
                "e6be6ed4572eb679"
            ]
        ]
    },
    {
        "id": "e6be6ed4572eb679",
        "type": "http response",
        "z": "a28b40984e94e443",
        "name": "Category Products",
        "statusCode": "",
        "headers": {},
        "x": 1150,
        "y": 700,
        "wires": []
    },
    {
        "id": "baf28307a703401a",
        "type": "http in",
        "z": "a28b40984e94e443",
        "name": "",
        "url": "/product",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 820,
        "wires": [
            [
                "0c2a9c9d6bf1492a"
            ]
        ]
    },
    {
        "id": "7b8aeb286933aaef",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "Product",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 560,
        "y": 820,
        "wires": [
            [
                "03b92492bdeafd7a"
            ]
        ]
    },
    {
        "id": "03b92492bdeafd7a",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Standardizing Response",
        "func": "function mapApiResponseToOutputSchema(apiResponse) {\n    const { product } = apiResponse.data;\n    const {\n        id,\n        name,\n        description,\n        variants,\n        assets: [asset],\n    } = product;\n\n    const productImages = [\n        {\n            id: asset.preview.split('/').pop(),\n            url: asset.preview,\n        },\n    ];\n\n    const mappedVariants = variants.map((variant) => {\n        const {\n            id,\n            name,\n            priceWithTax,\n            currencyCode,\n            assets: variantAssets,\n            options,\n        } = variant;\n\n        const variantImages = variantAssets.map((variantAsset) => {\n            if (variantAsset.preview) {\n                return {\n                    id: variantAsset.preview.split('/').pop(),\n                    url: variantAsset.preview,\n                };\n            }\n            // Handle the case where there's no preview image\n            return null;\n        }).filter(Boolean);\n\n        const variantAttributes = {};\n        options.forEach((option) => {\n            variantAttributes[option.group.name] = option.name;\n        });\n\n        return {\n            id,\n            name,\n            price :priceWithTax/ 100,\n            currencyCode,\n            images: variantImages,\n            attributes: variantAttributes,\n        };\n    });\n\n    return {\n        product: {\n            id,\n            name,\n            description,\n            images: productImages,\n            variants: mappedVariants,\n        },\n    };\n}\n\n// Your API response (msg.payload)\nconst apiResponse = msg.payload;\n\n// Mapping the API response to the output schema\nconst mappedData = mapApiResponseToOutputSchema(apiResponse);\n\n// Set the result as the new msg.payload\nmsg.payload = mappedData;\n\n// Return the updated msg object\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 820,
        "wires": [
            [
                "46b2be5bb6c28dd4"
            ]
        ]
    },
    {
        "id": "46b2be5bb6c28dd4",
        "type": "http response",
        "z": "a28b40984e94e443",
        "name": "Product",
        "statusCode": "",
        "headers": {},
        "x": 1000,
        "y": 820,
        "wires": []
    },
    {
        "id": "0c2a9c9d6bf1492a",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Product",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar productId = msg.req.query.productId;\nconst payload = JSON.stringify({\n  query: `\n  query Product($productId: ID) {\n  product(id: $productId) {\n    id\n    name\n    description\n    assets {\n      preview\n    }\n    variants {\n      id\n      name\n      priceWithTax\n      currencyCode\n      assets {\n        preview\n      }\n      options {\n        name\n        group {\n          name\n        }\n      }\n    }\n  }\n}`,\n  variables: {\n    \"productId\": productId\n  }\n});\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload)\n};\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 820,
        "wires": [
            [
                "7b8aeb286933aaef"
            ]
        ]
    },
    {
        "id": "0e2dec1a23f39a0a",
        "type": "debug",
        "z": "a28b40984e94e443",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 100,
        "wires": []
    },
    {
        "id": "1a6a147ed4e3c16f",
        "type": "catch",
        "z": "a28b40984e94e443",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 500,
        "y": 100,
        "wires": [
            [
                "0e2dec1a23f39a0a"
            ]
        ]
    },
    {
        "id": "d2714025fc52c428",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Standardizing Response",
        "func": "if (msg.payload.data === null) {\n    msg.statusCode = 404;\n} else {\n    function convertApiResponse(apiResponse) {\n        const adjustOrderLine = apiResponse.data.adjustOrderLine;\n\n        // Helper function to convert the productVariant structure\n        function convertProductVariant(productVariant) {\n            const images = [\n                ...productVariant.product.assets.map((asset) => asset.preview),\n                ...productVariant.assets.map((asset) => asset.preview),\n            ];\n\n            return {\n                id: productVariant.id,\n                name: productVariant.name,\n                price: productVariant.priceWithTax/100,\n                currencyCode: productVariant.currencyCode,\n                images: images.map((url) => ({\n                    url: url,\n                })),\n            };\n        }\n\n        // Convert the lines in the cart\n        const lines = adjustOrderLine.lines.map((line) => ({\n            id: line.id,\n            quantity: line.quantity,\n            linePrice: line.linePriceWithTax/100,\n            productVariant: convertProductVariant(line.productVariant),\n        }));\n\n        // Create the final cart object\n        const cart = {\n            id: adjustOrderLine.id,\n            lines,\n            total: adjustOrderLine.totalWithTax/100,\n            currencyCode: adjustOrderLine.currencyCode,\n            totalQuantity: adjustOrderLine.totalQuantity,\n        };\n\n        return { cart };\n    }\n\n    // Example API response\n    const apiResponse = msg.payload;\n\n    // Convert the API response to the desired format\n    const formattedCart = convertApiResponse(apiResponse);\n\n    // Log the formatted cart\n    //console.log(JSON.stringify(formattedCart, null, 2));\n\n    msg.payload = formattedCart;\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1140,
        "wires": [
            [
                "ebd152b7e163c549"
            ]
        ]
    },
    {
        "id": "04cf4bb9f44f8eb7",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Active Order",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar accessToken = msg.req.headers.accesstoken;\nconst payload = JSON.stringify({\n  query: `query ActiveOrder {\n  activeOrder {\n    id\n    lines {\n      id\n      linePriceWithTax\n      quantity\n      productVariant {\n        id\n        name\n        priceWithTax\n        featuredAsset{\n          preview\n        }\n        currencyCode\n      }\n    }\n    totalWithTax\n    totalQuantity\n    currencyCode\n  }\n}`,\n  variables: {}\n});\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 900,
        "wires": [
            [
                "28c39b03ac122136"
            ]
        ]
    },
    {
        "id": "28c39b03ac122136",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "activeOrder",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 900,
        "wires": [
            [
                "245086497feb8c1d"
            ]
        ]
    },
    {
        "id": "b140dad7298ec715",
        "type": "http in",
        "z": "a28b40984e94e443",
        "name": "",
        "url": "/cart",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 900,
        "wires": [
            [
                "04cf4bb9f44f8eb7"
            ]
        ]
    },
    {
        "id": "5af24c40cec88eef",
        "type": "http response",
        "z": "a28b40984e94e443",
        "name": "Cart",
        "statusCode": "",
        "headers": {},
        "x": 990,
        "y": 900,
        "wires": []
    },
    {
        "id": "245086497feb8c1d",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Standardizing Response",
        "func": "if (msg.payload.data.activeOrder === null) {\n    msg.statusCode = 404;\n} else {\n    function convertApiResponse(apiResponse) {\n        const activeOrder = apiResponse.data.activeOrder;\n\n        // Helper function to convert the productVariant structure\n        function convertProductVariant(productVariant) {\n            return {\n                id: productVariant.id,\n                name: productVariant.name,\n                price: productVariant.priceWithTax / 100,\n                currencyCode: productVariant.currencyCode,\n                featuredAsset: {\n                    url: productVariant.featuredAsset.preview,\n                },\n            };\n        }\n\n        // Convert the lines in the cart\n        const lines = activeOrder.lines.map((line) => ({\n            id: line.id,\n            quantity: line.quantity,\n            linePrice: line.linePriceWithTax / 100,\n            productVariant: convertProductVariant(line.productVariant),\n        }));\n\n        // Create the final cart object\n        const cart = {\n            id: activeOrder.id,\n            lines,\n            total: activeOrder.totalWithTax / 100,\n            currencyCode: activeOrder.currencyCode,\n            totalQuantity: activeOrder.totalQuantity,\n        };\n\n        return { cart };\n    }\n\n    // Example API response\n    const apiResponse = msg.payload;\n\n    // Convert the API response to the desired format\n    const formattedCart = convertApiResponse(apiResponse);\n\n    // Set the formatted cart as the payload\n    msg.payload = formattedCart;\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 900,
        "wires": [
            [
                "5af24c40cec88eef"
            ]
        ]
    },
    {
        "id": "40d3c937b5e510c0",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Add Item to Order",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar accessToken = msg.req.headers.accesstoken;\nvar productVariantId = msg.req.body.productVariantId;\nvar quantity = msg.req.body.quantity;\n\nconst payload = JSON.stringify({\n  query: `\n    mutation AddItemToOrder($productVariantId: ID!, $quantity: Int!) {\n  addItemToOrder(productVariantId: $productVariantId, quantity: $quantity) {\n    ... on Order {\n      id\n      lines {\n        id\n        linePriceWithTax\n        quantity\n        productVariant {\n          id\n          name\n          priceWithTax\n          assets {\n            preview\n          }\n          product {\n          assets {\n            preview\n          }\n        }\n          currencyCode\n        }\n      }\n      totalWithTax\n      totalQuantity\n      currencyCode\n    }\n  }\n}\n  `,\n  variables: {\n    \"productVariantId\": productVariantId,\n    \"quantity\": quantity\n  }\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 980,
        "wires": [
            [
                "bf9508530487db7f"
            ]
        ]
    },
    {
        "id": "bf9508530487db7f",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "Add Item to Order",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 980,
        "wires": [
            [
                "050926363742b6cc"
            ]
        ]
    },
    {
        "id": "d1f4560bce1a4b01",
        "type": "http in",
        "z": "a28b40984e94e443",
        "name": "",
        "url": "/cart",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 980,
        "wires": [
            [
                "40d3c937b5e510c0"
            ]
        ]
    },
    {
        "id": "86a7c0ec01496185",
        "type": "http response",
        "z": "a28b40984e94e443",
        "name": "Add Item to Order",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 980,
        "wires": []
    },
    {
        "id": "050926363742b6cc",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Standardizing Response",
        "func": "if (msg.payload.data === null) {\n    msg.statusCode = 404;\n} else {\n    function convertApiResponse(apiResponse) {\n        const addItemToOrder = apiResponse.data.addItemToOrder;\n\n        // Helper function to convert the productVariant structure\n        function convertProductVariant(productVariant) {\n            const images = [\n                ...productVariant.product.assets.map((asset) => asset.preview),\n                ...productVariant.assets.map((asset) => asset.preview),\n            ];\n\n            return {\n                id: productVariant.id,\n                name: productVariant.name,\n                price: productVariant.priceWithTax/100,\n                currencyCode: productVariant.currencyCode,\n                images: images.map((url) => ({\n                    url: url,\n                })),\n            };\n        }\n\n        // Convert the lines in the cart\n        const lines = addItemToOrder.lines.map((line) => ({\n            id: line.id,\n            quantity: line.quantity,\n            linePrice: line.linePriceWithTax/100,\n            productVariant: convertProductVariant(line.productVariant),\n        }));\n\n        // Create the final cart object\n        const cart = {\n            id: addItemToOrder.id,\n            lines,\n            total: addItemToOrder.totalWithTax/100,\n            currencyCode: addItemToOrder.currencyCode,\n            totalQuantity: addItemToOrder.totalQuantity,\n        };\n\n        return { cart };\n    }\n\n    // Example API response\n    const apiResponse = msg.payload;\n\n    // Convert the API response to the desired format\n    const formattedCart = convertApiResponse(apiResponse);\n\n    // Log the formatted cart\n    //console.log(JSON.stringify(formattedCart, null, 2));\n\n    msg.payload = formattedCart;\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 980,
        "wires": [
            [
                "86a7c0ec01496185"
            ]
        ]
    },
    {
        "id": "81b9f2b106954ba8",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Remove Order Line",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar accessToken = msg.req.headers.accesstoken;\nvar orderLineId = msg.req.query.lineId;\n\nconst payload = JSON.stringify({\n  query: `\n    mutation Mutation($orderLineId: ID!) {\n  removeOrderLine(orderLineId: $orderLineId) {\n    ... on Order {\n      id\n      lines {\n        id\n        linePriceWithTax\n        quantity\n        productVariant {\n          id\n          name\n          priceWithTax\n          assets {\n            preview\n          }\n          product {\n          assets {\n            preview\n          }\n        }\n          currencyCode\n        }\n      }\n      totalWithTax\n      totalQuantity\n      currencyCode\n    }\n    ... on OrderModificationError {\n      errorCode\n      message\n    }\n  }\n} \n  `,\n  variables: {\n    \"orderLineId\": orderLineId\n  }\n});\n\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\n\nmsg.payload = payload;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1060,
        "wires": [
            [
                "bef5082ad3ddebd5"
            ]
        ]
    },
    {
        "id": "bef5082ad3ddebd5",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "Remove Order Line",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 1060,
        "wires": [
            [
                "b9a6bd49bc07630c"
            ]
        ]
    },
    {
        "id": "1349ec09a3582510",
        "type": "http in",
        "z": "a28b40984e94e443",
        "name": "",
        "url": "/cart",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 1060,
        "wires": [
            [
                "81b9f2b106954ba8"
            ]
        ]
    },
    {
        "id": "23bf754467f424c4",
        "type": "http response",
        "z": "a28b40984e94e443",
        "name": "Remove Order Line",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 1060,
        "wires": []
    },
    {
        "id": "b9a6bd49bc07630c",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Standardizing Response",
        "func": "if (msg.payload.data === null) {\n    msg.statusCode = 404;\n} else {\n    function convertApiResponse(apiResponse) {\n        const removeOrderLine = apiResponse.data.removeOrderLine;\n\n        // Helper function to convert the productVariant structure\n        function convertProductVariant(productVariant) {\n            const images = [\n                ...productVariant.product.assets.map((asset) => asset.preview),\n                ...productVariant.assets.map((asset) => asset.preview),\n            ];\n\n            return {\n                id: productVariant.id,\n                name: productVariant.name,\n                price: productVariant.priceWithTax/100,\n                currencyCode: productVariant.currencyCode,\n                images: images.map((url) => ({\n                    url: url,\n                })),\n            };\n        }\n\n        // Convert the lines in the cart\n        const lines = removeOrderLine.lines.map((line) => ({\n            id: line.id,\n            quantity: line.quantity,\n            linePrice: line.linePriceWithTax/100,\n            productVariant: convertProductVariant(line.productVariant),\n        }));\n\n        // Create the final cart object\n        const cart = {\n            id: removeOrderLine.id,\n            lines,\n            total: removeOrderLine.totalWithTax/100,\n            currencyCode: removeOrderLine.currencyCode,\n            totalQuantity: removeOrderLine.totalQuantity,\n        };\n\n        return { cart };\n    }\n\n    // Example API response\n    const apiResponse = msg.payload;\n\n    // Convert the API response to the desired format\n    const formattedCart = convertApiResponse(apiResponse);\n\n    // Log the formatted cart\n    //console.log(JSON.stringify(formattedCart, null, 2));\n\n    msg.payload = formattedCart;\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1060,
        "wires": [
            [
                "23bf754467f424c4"
            ]
        ]
    },
    {
        "id": "6cbe1cd10dc91035",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Adjust Order Line",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar accessToken = msg.req.headers.accesstoken;\nvar orderLineId = msg.req.body.lineId;\nvar quantity = msg.req.body.quantity;\n\nconst payload = JSON.stringify({\n  query: `\n    mutation AdjustOrderLine($orderLineId: ID!, $quantity: Int!) {\n  adjustOrderLine(orderLineId: $orderLineId, quantity: $quantity) {\n    ... on Order {\n      id\n      lines {\n        id\n        linePriceWithTax\n        quantity\n        productVariant {\n          id\n          name\n          priceWithTax\n          assets {\n            preview\n          }\n          product {\n          assets {\n            preview\n          }\n        }\n          currencyCode\n        }\n      }\n      totalWithTax\n      totalQuantity\n      currencyCode\n    }\n    ... on OrderModificationError {\n      errorCode\n      message\n    }\n    ... on OrderLimitError {\n      errorCode\n      message\n      maxItems\n    }\n    ... on NegativeQuantityError {\n      errorCode\n      message\n    }\n    ... on InsufficientStockError {\n      errorCode\n      message\n      quantityAvailable\n    }\n  }\n}\n  `,\n  variables: {\n    \"orderLineId\": orderLineId,\n    \"quantity\": quantity\n  }\n});\n\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1140,
        "wires": [
            [
                "2fb6c8b331db9b0e"
            ]
        ]
    },
    {
        "id": "2fb6c8b331db9b0e",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "Adjust Order Line",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 1140,
        "wires": [
            [
                "d2714025fc52c428"
            ]
        ]
    },
    {
        "id": "bfe69ced51e5b0ad",
        "type": "http in",
        "z": "a28b40984e94e443",
        "name": "",
        "url": "/cart",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1140,
        "wires": [
            [
                "6cbe1cd10dc91035"
            ]
        ]
    },
    {
        "id": "ebd152b7e163c549",
        "type": "http response",
        "z": "a28b40984e94e443",
        "name": "Adjust Order Line",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 1140,
        "wires": []
    },
    {
        "id": "4959ef375ec2d5fe",
        "type": "http in",
        "z": "a28b40984e94e443",
        "name": "",
        "url": "/checkout",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1440,
        "wires": [
            [
                "a149cf7d3e7a03d7",
                "bf1cd6cc86e1c78a",
                "a941c2e810c726fb",
                "df6ac0afbb142766"
            ]
        ]
    },
    {
        "id": "a149cf7d3e7a03d7",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Eligible Shipping Methods",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar accessToken = msg.req.headers.accesstoken;\nconst payload = JSON.stringify({\n  query: `query Query {\n\n  eligibleShippingMethods {\n\n    id\n\n    price\n\n    priceWithTax\n\n    code\n\n    name\n\n    description\n\n    metadata\n\n    customFields\n\n  }\n\n}`,\n  variables: {}\n});\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1340,
        "wires": [
            [
                "5627cfab87e9d4d7"
            ]
        ]
    },
    {
        "id": "5627cfab87e9d4d7",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "Eligible Shipping Methods",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 630,
        "y": 1340,
        "wires": [
            [
                "3ee0a4ad932d8dbe"
            ]
        ]
    },
    {
        "id": "bf1cd6cc86e1c78a",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Set Billing Address",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar accessToken = msg.req.headers.accesstoken;\nvar fullName = msg.req.body.shippingAddress.firstName + \" \" + msg.req.body.shippingAddress.lastName;\nvar landmark = msg.req.body.shippingAddress.landmark;\nvar streetLine1 = msg.req.body.shippingAddress.streetLine1;\nvar streetLine2 = msg.req.body.shippingAddress.streetLine2;\nvar city = msg.req.body.shippingAddress.city;\nvar postalCode = msg.req.body.shippingAddress.postalCode;\nvar countryCode = msg.req.body.shippingAddress.countryCode;\nvar phoneNumber = msg.req.body.shippingAddress.phoneNumber;\nvar state = msg.req.body.shippingAddress.state;\n\nconst payload = JSON.stringify({\n  query: `\n    mutation{\n\n  \n\n  setOrderBillingAddress(input:{\n\nfullName: \"${fullName}\"\n\ncompany: \"${landmark}\"\n\nstreetLine1: \"${streetLine1}\"\n\nstreetLine2: \"${streetLine2}\"\n\ncity: \"${city}\"\n\nprovince : \"${state}\"\n\npostalCode: \"${postalCode}\"\n\ncountryCode: \"${countryCode}\"\n\nphoneNumber: \"${phoneNumber}\"  \n\n  })\n\n  {\n\n    ... on Order {\n\n    id\n\n    code\n\n    state\n\n    active\n\n    subTotal\n\n    total \n\n    }\n\n     ... on NoActiveOrderError {\n\n     errorCode\n\n      message\n\n    }\n\n}\n\n}\n  `,\n  variables: {}\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1400,
        "wires": [
            [
                "96e3539fe6f15bb6"
            ]
        ]
    },
    {
        "id": "96e3539fe6f15bb6",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "Set Billing Address",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "a382a8cc58dde18e",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "Set Shipping Address",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 620,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "fd0a8be3be8eef21",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Arranging Payment To Order",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar accessToken = msg.req.headers.accesstoken;\nconst payload = JSON.stringify({\n  query: `mutation {\n\n  transitionOrderToState(state:\"ArrangingPayment\")\n\n  {\n\n    ... on Order {\n\n    id\n\n    code\n\n    state\n\n    active\n\n    subTotal\n\n    total\n      totalQuantity\n      shipping\n      shippingAddress {\n        streetLine1\n        streetLine2\n        province\n        postalCode\n        country\n      }\n    }\n\n     ... on OrderStateTransitionError {\n\n     errorCode\n\n      message\n      fromState\n      toState\n      transitionError\n    }\n\n  }\n\n}`,\n  variables: {}\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1520,
        "wires": [
            [
                "166d435024981a3b"
            ]
        ]
    },
    {
        "id": "166d435024981a3b",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "Arranging Payment To Order",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 680,
        "y": 1520,
        "wires": [
            [
                "549c5a0d9dc75d5c"
            ]
        ]
    },
    {
        "id": "3ee0a4ad932d8dbe",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Set Shipping Method",
        "func": "function extractShippingMethodIds(apiResponse) {\n  const eligibleShippingMethods = apiResponse.data.eligibleShippingMethods;\n  const ids = eligibleShippingMethods.map((method) => parseInt(method.id, 10));\n  return ids;\n}\n\n// Example API response\nconst apiResponse = msg.payload;\n\n// Extract shipping method IDs as integers\nconst shippingMethodIds = extractShippingMethodIds(apiResponse);\n\n// Log the shipping method IDs\n//console.log(shippingMethodIds);\nmsg.payload = {\n  \"shippingMethodIds\": shippingMethodIds\n};\n\nvar accessToken = msg.req.headers.accesstoken;\nvar shippingMethodId = msg.payload.shippingMethodIds;\n//console.log('shippingMethodId:', shippingMethodId); // Debug statement\n\nconst payload = JSON.stringify({\n  query: `mutation {\n  setOrderShippingMethod(shippingMethodId: [${shippingMethodId}]) {\n    ... on Order {\n      id\n      createdAt\n      updatedAt\n      type\n      orderPlacedAt\n      code\n      state\n      active\n      totalQuantity\n      subTotal\n      subTotalWithTax\n      currencyCode\n      shipping\n      shippingWithTax\n      total\n      totalWithTax\n    }\n    ... on OrderModificationError {\n      errorCode\n      message\n    }\n    ... on IneligibleShippingMethodError {\n      errorCode\n      message\n    }\n    ... on NoActiveOrderError {\n      errorCode\n      message\n    }\n  }\n}`,\n  variables: {}\n});\nconsole.log('payload:', payload); // Debug statement\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\nconsole.log('headers:', msg.headers); // Debug statement\n\nmsg.payload = payload;\nconsole.log('msg:', msg); // Debug statement\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1340,
        "wires": [
            [
                "b19840b30fe6be06"
            ]
        ]
    },
    {
        "id": "b19840b30fe6be06",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "Set Shipping Method",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1120,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "a941c2e810c726fb",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Set Shipping Address",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar accessToken = msg.req.headers.accesstoken;\nvar fullName = msg.req.body.shippingAddress.firstName + \" \" + msg.req.body.shippingAddress.lastName;\nvar landmark = msg.req.body.shippingAddress.landmark;\nvar streetLine1 = msg.req.body.shippingAddress.streetLine1;\nvar streetLine2 = msg.req.body.shippingAddress.streetLine2;\nvar city = msg.req.body.shippingAddress.city;\nvar postalCode = msg.req.body.shippingAddress.postalCode;\nvar countryCode = msg.req.body.shippingAddress.countryCode;\nvar phoneNumber = msg.req.body.shippingAddress.phoneNumber;\nvar state = msg.req.body.shippingAddress.state;\n\n\nconst payload = JSON.stringify({\n  query: `mutation{\n\n  \n\n  setOrderShippingAddress(input:{\n\nfullName: \"${fullName}\"\n\ncompany: \"${landmark}\"\n\nstreetLine1: \"${streetLine1}\"\n\nstreetLine2: \"${streetLine2}\"\n\ncity: \"${city}\"\n\nprovince : \"${state}\"\n\npostalCode: \"${postalCode}\"\n\ncountryCode: \"${countryCode}\"\n\nphoneNumber: \"${phoneNumber}\"  \n \n\n  })\n\n  {\n\n    ... on Order {\n\n    id\n\n    code\n\n    state\n\n    active\n\n    subTotal\n\n    total \n\n    }\n\n     ... on NoActiveOrderError {\n\n     errorCode\n\n      message\n\n    }\n\n}\n\n}\n  `,\n  variables: {}\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1460,
        "wires": [
            [
                "a382a8cc58dde18e"
            ]
        ]
    },
    {
        "id": "549c5a0d9dc75d5c",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Check Error",
        "func": "if (msg.payload.data.transitionOrderToState.errorCode === \"ORDER_STATE_TRANSITION_ERROR\") {\n    msg.statusCode=500\n} else {\n    // Handle the success case here\n    msg.statusCode = 200\n    \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1420,
        "wires": [
            [
                "bf24ceaf715dfeca"
            ]
        ]
    },
    {
        "id": "bf24ceaf715dfeca",
        "type": "switch",
        "z": "a28b40984e94e443",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 990,
        "y": 1440,
        "wires": [
            [
                "2013a3c80715eb59"
            ],
            [
                "2507eabd2d833faa"
            ]
        ]
    },
    {
        "id": "2013a3c80715eb59",
        "type": "http response",
        "z": "a28b40984e94e443",
        "name": "Error",
        "statusCode": "",
        "headers": {},
        "x": 1130,
        "y": 1400,
        "wires": []
    },
    {
        "id": "2507eabd2d833faa",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Add Payment To Order",
        "func": "var accessToken = msg.req.headers.accesstoken;\n\n\nconst payload = JSON.stringify({\n  query: `mutation {\n\n  addPaymentToOrder(input:{\n\n      \n\n      method:\"standard-payment\"\n\n      metadata:{}\n\n      \n\n  })\n\n  {\n\n    ... on Order {\n\n    id\n    \n    code\n    type\n    state\n\n    active\n      billingAddress {\n        country\n        postalCode\n        province\n        streetLine1\n        streetLine2\n      }\n      totalQuantity\n      totalWithTax\n      subTotalWithTax\n      shippingWithTax\n      customer {\n        firstName\n        phoneNumber\n        emailAddress\n      }\n      orderPlacedAt\n    }\n\n     ... on OrderPaymentStateError {\n\n     errorCode\n\n      message\n\n    }\n    ... on IneligiblePaymentMethodError {\n      errorCode\n      message\n      eligibilityCheckerMessage\n    }\n    ... on PaymentFailedError {\n      errorCode\n      message\n      paymentErrorMessage\n    }\n    ... on PaymentDeclinedError {\n      errorCode\n      message\n      paymentErrorMessage\n    }\n    ... on OrderStateTransitionError {\n      errorCode\n      message\n      transitionError\n      fromState\n      toState\n    }\n    ... on NoActiveOrderError {\n      errorCode\n      message\n    }\n  }\n\n}`,\n  variables: {}\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1520,
        "wires": [
            [
                "1982b63d44d810d0"
            ]
        ]
    },
    {
        "id": "1982b63d44d810d0",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "Add Payment To Order",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1220,
        "y": 1520,
        "wires": [
            [
                "e8cfc3471d3b47c6"
            ]
        ]
    },
    {
        "id": "e8cfc3471d3b47c6",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Checkout",
        "func": "\nif (msg.payload.data.addPaymentToOrder.id){\n// Input timestamp\nconst inputTimestamp = msg.payload.data.addPaymentToOrder.orderPlacedAt;\n\n// Convert the input timestamp to a JavaScript Date object\nconst date = new Date(inputTimestamp);\n\n// Add 5 days to the date\ndate.setDate(date.getDate() + 5);\n\n// Define arrays for day and month names\nconst days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n// Format the date as \"Day DD Month YYYY\"\nconst formattedDate = `${days[date.getDay()]}  ${date.getDate()} ${months[date.getMonth()]} ${date.getFullYear()}`;\n\n//console.log(formattedDate); // Output: \"Sunday  5 November 2023\"\n\nmsg.payload={\n    orderId: msg.payload.data.addPaymentToOrder.id,\n    expectedDelivery : formattedDate\n}\n\n\n\n}\nelse{\n    return msg;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1520,
        "wires": [
            [
                "af06c4b0ca9c71b1"
            ]
        ]
    },
    {
        "id": "af06c4b0ca9c71b1",
        "type": "http response",
        "z": "a28b40984e94e443",
        "name": "Checkout",
        "statusCode": "",
        "headers": {},
        "x": 1580,
        "y": 1520,
        "wires": []
    },
    {
        "id": "df6ac0afbb142766",
        "type": "delay",
        "z": "a28b40984e94e443",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 1580,
        "wires": [
            [
                "fd0a8be3be8eef21"
            ]
        ]
    },
    {
        "id": "e2d93ef4ab648934",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Get Customer Orders",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\n\nvar accessToken = msg.req.headers.accesstoken;\nconst payload = JSON.stringify({\n  query: `query ActiveCustomer($options: OrderListOptions) {\n  activeCustomer {\n    orders(options: $options) {\n      items {\n        id\n        orderPlacedAt\n        totalWithTax\n        currencyCode\n        state\n        lines {\n          id\n          linePriceWithTax\n          quantity\n          productVariant {\n            id\n            name\n            priceWithTax\n            featuredAsset {\n              preview\n            }\n          }\n        }\n      }\n    }\n  }\n}`,\n  variables: {\n    \"options\": {\n      \"filter\": {\n        \"active\": {\n          \"eq\": false\n        }\n      },\n      \"sort\": {\n        \"id\": \"DESC\"\n      }\n    }\n  }\n});\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1220,
        "wires": [
            [
                "2708f76610625515"
            ]
        ]
    },
    {
        "id": "2708f76610625515",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "Get Customer Orders",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 1220,
        "wires": [
            [
                "cb0fa03c8b773d83"
            ]
        ]
    },
    {
        "id": "7af70449c314ec73",
        "type": "http in",
        "z": "a28b40984e94e443",
        "name": "",
        "url": "/orders",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 1220,
        "wires": [
            [
                "e2d93ef4ab648934"
            ]
        ]
    },
    {
        "id": "4cff704051bc0c7c",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Standardizing Response",
        "func": "// function transformApiResponse(apiResponse) {\n//     const activeCustomer = apiResponse.data.activeCustomer;\n//     // Helper function to transform a line item\n//     function transformLine(lineItem) {\n//         const productVariant = lineItem.productVariant;\n\n//         // Combine images from 'assets' and 'product.assets'\n//         const images = [\n//             ...productVariant.assets.map((asset) => asset.preview),\n//             ...productVariant.product.assets.map((asset) => asset.preview),\n//         ];\n\n//         return {\n//             lineId: lineItem.id,\n//             linePrice: lineItem.linePriceWithTax/100,\n//             productId: productVariant.id,\n//             productName: productVariant.name,\n//             quantity: lineItem.quantity,\n//             pricePerUnit: productVariant.priceWithTax/100,\n//             currencyCode: productVariant.currencyCode,\n//             images: images,\n//         };\n//     }\n\n//     // Helper function to transform an order with billing and shipping addresses\n//     function transformOrder(order) {\n//         return {\n//             orderId: order.id,\n//             orderDate: order.orderPlacedAt,\n//             totalAmount: order.totalWithTax/100,\n//             currencyCode: order.currencyCode,\n//             status: order.state,\n//             lines: order.lines.map(transformLine),\n//             billing: {\n//                 firstName: order.billingAddress.fullName.split(' ')[0],\n//                 lastName: order.billingAddress.fullName.split(' ')[1],\n//                 phoneNumber: order.billingAddress.phoneNumber,\n//                 streetLine1: order.billingAddress.streetLine1,\n//                 streetLine2: order.billingAddress.streetLine2,\n//                 city: order.billingAddress.city,\n//                 province: order.billingAddress.province,\n//                 postalCode: order.billingAddress.postalCode,\n//                 countryCode: order.billingAddress.countryCode,\n//                 country: order.billingAddress.country,\n//             },\n//             shipping: {\n//                 firstName: order.shippingAddress.fullName.split(' ')[0],\n//                 lastName: order.shippingAddress.fullName.split(' ')[1],\n//                 phoneNumber: order.shippingAddress.phoneNumber,\n//                 streetLine1: order.shippingAddress.streetLine1,\n//                 streetLine2: order.shippingAddress.streetLine2,\n//                 city: order.shippingAddress.city,\n//                 province: order.shippingAddress.province,\n//                 postalCode: order.shippingAddress.postalCode,\n//                 countryCode: order.shippingAddress.countryCode,\n//                 country: order.shippingAddress.country,\n//             },\n//         };\n//     }\n\n//     // Transform orders\n//     const orders = activeCustomer.orders.items.map(transformOrder);\n\n//     return {\n//         customer: {\n//             id: activeCustomer.id,\n//             name: `${activeCustomer.firstName} ${activeCustomer.lastName}`,\n//             email: activeCustomer.emailAddress,\n//             phoneNumber: activeCustomer.phoneNumber,\n//         },\n//         orders: orders,\n//     };\n// }\n\nconst apiResponse = msg.payload;\n\n// Function to modify prices in the API response\nfunction modifyPrices(response) {\n  response.data.activeCustomer.orders.items.forEach(order => {\n    order.totalWithTax = order.totalWithTax / 100;\n    order.lines.forEach(line => {\n      line.linePriceWithTax = line.linePriceWithTax / 100;\n      line.productVariant.priceWithTax = line.productVariant.priceWithTax / 100;\n    });\n  });\n}\n\n// Modify the prices in the API response\nconst transformedData =modifyPrices(apiResponse);\n// Example API response\n\n// Transform the API response into the desired format\n// transformApiResponse(apiResponse);\n\n// Log the transformed data\n//console.log(JSON.stringify(transformedData, null, 2));\nmsg.payload = transformedData;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1200,
        "wires": [
            [
                "4cd1f3bf03e4ce0d"
            ]
        ]
    },
    {
        "id": "208344ec5c9273a2",
        "type": "inject",
        "z": "a28b40984e94e443",
        "name": "Enviroment Variable Inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 40,
        "wires": [
            [
                "7ae2e6f7a5d169a0"
            ]
        ]
    },
    {
        "id": "7ae2e6f7a5d169a0",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Enviroment Variables",
        "func": "context.global.set(\"shopUrl\",\"http://49.205.192.156:3000\");\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "4cd1f3bf03e4ce0d",
        "type": "http response",
        "z": "a28b40984e94e443",
        "name": "Get Customer Orders",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 1220,
        "wires": []
    },
    {
        "id": "c4e5e2255596d763",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Get Order Details",
        "func": "msg.shopUrl = context.global.get(\"shopUrl\");\nvar accessToken = msg.req.headers.accesstoken;\nvar orderId = msg.req.query.orderId\nconst payload = JSON.stringify({\n  query: `{\n  order(id: ${orderId}){\n        id\n        orderPlacedAt\n        subTotalWithTax\n    \t\tshippingWithTax\n        totalWithTax\n        currencyCode\n        state\n        lines {\n          id\n          linePriceWithTax\n          quantity\n          productVariant {\n            id\n            name\n            priceWithTax\n            featuredAsset {\n              preview\n            }\n            currencyCode\n          }\n        }\n        shippingAddress {\n          fullName\n          phoneNumber\n          streetLine1\n          streetLine2\n          city\n          province\n          postalCode\n          countryCode\n          country\n        }\n        billingAddress {\n          fullName\n          phoneNumber\n          streetLine1\n          streetLine2\n          city\n          province\n          postalCode\n          countryCode\n          country  \n        }\n      }\n    }\n`,\n  variables: {}\n});\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Content-Length': Buffer.byteLength(payload),\n  'Authorization': 'Bearer ' + accessToken\n};\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1700,
        "wires": [
            [
                "42b3e3150604b640"
            ]
        ]
    },
    {
        "id": "42b3e3150604b640",
        "type": "http request",
        "z": "a28b40984e94e443",
        "name": "Get Order Details",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{shopUrl}}}/shop-api",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 630,
        "y": 1700,
        "wires": [
            [
                "99174139e331f236"
            ]
        ]
    },
    {
        "id": "b0397dc4dccb415d",
        "type": "http response",
        "z": "a28b40984e94e443",
        "name": "Get Order Details",
        "statusCode": "",
        "headers": {},
        "x": 1150,
        "y": 1700,
        "wires": []
    },
    {
        "id": "c46e945d0e76f58e",
        "type": "http in",
        "z": "a28b40984e94e443",
        "name": "",
        "url": "/order",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1700,
        "wires": [
            [
                "c4e5e2255596d763"
            ]
        ]
    },
    {
        "id": "a4ea2fa25b45a014",
        "type": "comment",
        "z": "a28b40984e94e443",
        "name": "API Triggers URI",
        "info": "",
        "x": 140,
        "y": 120,
        "wires": []
    },
    {
        "id": "ccfec731abee54c4",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Standardizing Response",
        "func": "function modifyApiResponsePrices(apiResponse) {\n    // Helper function to modify the price of a variant\n    function modifyVariant(variant) {\n        return {\n            ...variant,\n            priceWithTax: variant.priceWithTax / 100,\n        };\n    }\n\n    // Modify the products in the response\n    const modifiedItems = apiResponse.data.products.items.map((product) => ({\n        ...product,\n        variants: product.variants.map(modifyVariant),\n    }));\n\n    // Create the modified products object\n    const modifiedProducts = {\n        ...apiResponse.data.products,\n        items: modifiedItems,\n    };\n\n    // Return the modified API response\n    return {\n        ...apiResponse,\n        data: {\n            ...apiResponse.data,\n            products: modifiedProducts,\n        },\n    };\n}\n\n// Example API response\nconst apiResponse = msg.payload;\n\n// Modify the API response\nconst modifiedApiResponse = modifyApiResponsePrices(apiResponse);\nmsg.payload=modifiedApiResponse;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 600,
        "wires": [
            [
                "1cd658e2deeac441"
            ]
        ]
    },
    {
        "id": "99174139e331f236",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Standardizing Response",
        "func": "const apiResponse = msg.payload;\n\n// Modify the API response by dividing the prices by 100\napiResponse.data.order.totalWithTax /= 100;\napiResponse.data.order.shippingWithTax /= 100;\napiResponse.data.order.subTotalWithTax /= 100;\n\napiResponse.data.order.lines.forEach(line => {\n    line.linePriceWithTax /= 100;\n    line.productVariant.priceWithTax /= 100;\n});\n\nmsg.payload = apiResponse;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1700,
        "wires": [
            [
                "b0397dc4dccb415d"
            ]
        ]
    },
    {
        "id": "cb0fa03c8b773d83",
        "type": "function",
        "z": "a28b40984e94e443",
        "name": "Standardizing Response",
        "func": "// Sample API response\nconst apiResponse = msg.payload;\n\n// Function to modify prices in the API response\nfunction modifyPrices(response) {\n  response.data.activeCustomer.orders.items.forEach(order => {\n    order.totalWithTax = order.totalWithTax / 100;\n    order.lines.forEach(line => {\n      line.linePriceWithTax = line.linePriceWithTax / 100;\n      line.productVariant.priceWithTax = line.productVariant.priceWithTax / 100;\n    });\n  });\n}\n\n// Modify the prices in the API response\nmodifyPrices(apiResponse);\n\n// Log the modified response\n//console.log(JSON.stringify(apiResponse, null, 2));\n\nmsg.payload= {orders : apiResponse.data.activeCustomer.orders};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1260,
        "wires": [
            [
                "4cd1f3bf03e4ce0d"
            ]
        ]
    },
    {
        "id": "89ac49a4e08f834a",
        "type": "http in",
        "z": "b607acf4f7979f06",
        "name": "",
        "url": "/content",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "3db395d1f7eb476c"
            ]
        ]
    },
    {
        "id": "14771ab11f9e9e25",
        "type": "http response",
        "z": "b607acf4f7979f06",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 840,
        "y": 160,
        "wires": []
    },
    {
        "id": "38fb14614f5c8796",
        "type": "http request",
        "z": "b607acf4f7979f06",
        "name": "Contentfull",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://cdn.contentful.com/spaces/gqlaeh1nu6o2/assets",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 390,
        "y": 120,
        "wires": [
            [
                "71da8581a66eb4a1",
                "238474fb21c1736a"
            ]
        ]
    },
    {
        "id": "71da8581a66eb4a1",
        "type": "function",
        "z": "b607acf4f7979f06",
        "name": "Contentfull",
        "func": "//const customer_id = msg.req.body.total;\n\nvar title1 = msg.payload.items[0].fields.title;\n\nvar title2 = msg.payload.items[1].fields.title;\n\nnode.warn(\"title----1-----\" + title1);\n\nnode.warn(\"title----2-----\" + title2);\n\nvar description1 = msg.payload.items[0].fields.description;\n\nvar description2 = msg.payload.items[1].fields.description;\n\nvar url1 = msg.payload.items[0].fields.file.url;\n\nvar url2 = msg.payload.items[1].fields.file.url;\n\n\n\n\nmsg.payload = {\n\n    \"items\": [{ \"title\": title1, \"description\": description1, \"url\": url1 }, { \"title\": title2, \"description\": description2, \"url\": url2 }]\n\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 120,
        "wires": [
            [
                "14771ab11f9e9e25"
            ]
        ]
    },
    {
        "id": "238474fb21c1736a",
        "type": "debug",
        "z": "b607acf4f7979f06",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 60,
        "wires": []
    },
    {
        "id": "3db395d1f7eb476c",
        "type": "http request",
        "z": "b607acf4f7979f06",
        "name": "Strapi",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://49.206.253.146:1337/api/raybans/1?populate=*",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer d923f9834d76440fcc1b1745087745df8284c6fd8f8a76bcdb7d8a8b86c7299321a1d5540ec58339c3b8e1e481509004644599b8c31a4fb219b3b7cd8f6da3d8768203d1bf213528665650fd23c5a7266641f3390d30c7afca65f8b41ed8edcee6364b9c1cf466ab43a7ef36c635dae7a3c24d0ff7aff636a137775c5652b58f"
            }
        ],
        "x": 370,
        "y": 220,
        "wires": [
            [
                "241ed0fcfb9d1adf"
            ]
        ]
    },
    {
        "id": "241ed0fcfb9d1adf",
        "type": "function",
        "z": "b607acf4f7979f06",
        "name": "Strapi",
        "func": "const apiResponse = msg.payload;\n\n// Define base URL\nconst baseUrl = \"http://49.206.253.146:1337\"; // Replace \"http://49.206.253.146:1337\" with your base URL\n\n// Extracting image URLs with titles and base URL\nconst imagesWithTitles = apiResponse.data.attributes.image.data.map(asset => {\n  return {\n    title: asset.attributes.name,\n    url: baseUrl + asset.attributes.url\n  };\n});\n\nmsg.payload = imagesWithTitles;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 220,
        "wires": [
            [
                "14771ab11f9e9e25"
            ]
        ]
    },
    {
        "id": "1f659868fed700f5",
        "type": "http request",
        "z": "b607acf4f7979f06",
        "name": "Strapi",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://3.6.212.112:1337/api/amebs?populate=%2A",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer 9eb22dcc3001f59120c3be6a13ffdeffba2e3b8aa79e168fe962fe10e54c8bd1d9b305ffad193f339fde5207fe512bf99682ea066b8949db8f315a4e5586fd523f0d2e9736462ccdb8c3c25186299ed81ab6525e829efe986bed06e2a54643f1952f771c29289300cbf8e42d73bd5acc89dbbc45f0fe79fcc34c366a2ad6f280"
            }
        ],
        "x": 370,
        "y": 160,
        "wires": [
            [
                "88d11b7fd91b679a"
            ]
        ]
    },
    {
        "id": "88d11b7fd91b679a",
        "type": "function",
        "z": "b607acf4f7979f06",
        "name": "Strapi",
        "func": "var title1 = msg.payload.data[0].attributes.name;\n\nnode.warn(\"title1  \" + title1);\n\nvar title2 = msg.payload.data[1].attributes.name;\n\nnode.warn(\"title2  \" + title2);\n\nvar description1 = msg.payload.data[0].attributes.name;\n\nnode.warn(\"description1  \" + description1);\n\nvar description2 = msg.payload.data[1].attributes.name;\n\nnode.warn(\"description2  \" + description2);\n\nvar url3 = msg.payload.data[0].attributes.Banner.data.attributes.formats.large.url;\n\nnode.warn(\"url3  \" + url3);\n\nvar url4 = msg.payload.data[1].attributes.Banner.data.attributes.formats.large.url;\n\nnode.warn(\"url4  \" + url4);\n\nvar baseurl = \"http://3.6.212.112:1337\";\n\nvar url1 = baseurl + url3;\n\nvar url2 = baseurl + url4;\n\nmsg.payload = {\n\n    \"items\": [{ \"title\": title1, \"description\": description1, \"url\": url1 }, { \"title\": title2, \"description\": description2, \"url\": url2 }]\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "82bcaf7de8d7b503",
        "type": "http in",
        "z": "13b0744d8112940c",
        "name": "",
        "url": "/search",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "844da3301f56ef9b"
            ]
        ]
    },
    {
        "id": "d3d54717b6699840",
        "type": "http request",
        "z": "13b0744d8112940c",
        "name": "Typesense Search",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://49.206.253.146:4455//collections/music_products/documents/search?query_by=name&q={{{q}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-TYPESENSE-API-KEY",
                "valueType": "other",
                "valueValue": "xyz"
            }
        ],
        "x": 490,
        "y": 80,
        "wires": [
            [
                "ee3f70f0dfedf033"
            ]
        ]
    },
    {
        "id": "ee3f70f0dfedf033",
        "type": "http response",
        "z": "13b0744d8112940c",
        "name": "Search",
        "statusCode": "",
        "headers": {},
        "x": 680,
        "y": 80,
        "wires": []
    },
    {
        "id": "844da3301f56ef9b",
        "type": "function",
        "z": "13b0744d8112940c",
        "name": "Search",
        "func": "msg.q= msg.req.query.q; \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 80,
        "wires": [
            [
                "d3d54717b6699840"
            ]
        ]
    },
    {
        "id": "c0db7483f2a2eba2",
        "type": "function",
        "z": "3da6343a79b654c4",
        "name": "stripeCheckout",
        "func": "var require = context.global.get('require');\nvar stripe_accesstoken = msg.req.headers.stripe_accesstoken;\nvar cancel_url = msg.payload.cancel_url;\nnode.warn(\"cancel_url : \" + cancel_url);\nvar currency = msg.payload.line_items[0].price_data.currency;\nnode.warn(\"currency : \" + currency);\nmsg.headers = {};\nmsg.headers = {\n    'Authorization': 'Bearer ' + stripe_accesstoken,\n    'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nvar postData = qs.stringify(msg.payload);\nmsg.payload = postData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "qs",
                "module": "querystring"
            }
        ],
        "x": 340,
        "y": 180,
        "wires": [
            [
                "861038831b3609c0"
            ]
        ]
    },
    {
        "id": "ac42a27c52fdce96",
        "type": "http in",
        "z": "3da6343a79b654c4",
        "name": "",
        "url": "/stripe_checkout",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "c0db7483f2a2eba2"
            ]
        ]
    },
    {
        "id": "3e065f61ba1eaf54",
        "type": "http response",
        "z": "3da6343a79b654c4",
        "name": "stripeCheckout",
        "statusCode": "",
        "headers": {},
        "x": 760,
        "y": 180,
        "wires": []
    },
    {
        "id": "861038831b3609c0",
        "type": "http request",
        "z": "3da6343a79b654c4",
        "name": "stripeCheckout",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.stripe.com/v1/checkout/sessions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "application/x-www-form-urlencoded"
            }
        ],
        "x": 560,
        "y": 180,
        "wires": [
            [
                "3e065f61ba1eaf54"
            ]
        ]
    },
    {
        "id": "efbbca9af2f2d568",
        "type": "http in",
        "z": "e460c767811fd1fc",
        "name": "",
        "url": "/products2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 100,
        "wires": [
            [
                "b6cd419edec627f2"
            ]
        ]
    },
    {
        "id": "b6cd419edec627f2",
        "type": "http request",
        "z": "e460c767811fd1fc",
        "name": "Algolia Vendure Products",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://A4HOSBA5EQ-dsn.algolia.net/1/indexes/productsAEMB",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-Algolia-API-Key",
                "valueType": "other",
                "valueValue": "ff92af83e8780d396fc3c31640d5c670"
            },
            {
                "keyType": "other",
                "keyValue": "X-Algolia-Application-Id",
                "valueType": "other",
                "valueValue": "99W5FLUTWP"
            }
        ],
        "x": 500,
        "y": 100,
        "wires": [
            [
                "18430af72c53d089"
            ]
        ]
    },
    {
        "id": "18430af72c53d089",
        "type": "http response",
        "z": "e460c767811fd1fc",
        "name": "Algolia Shopify Products",
        "statusCode": "",
        "headers": {},
        "x": 760,
        "y": 100,
        "wires": []
    },
    {
        "id": "77090e1f9bfc884e",
        "type": "http in",
        "z": "e460c767811fd1fc",
        "name": "",
        "url": "/search",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 160,
        "wires": [
            [
                "16fb6b66da7563df"
            ]
        ]
    },
    {
        "id": "16fb6b66da7563df",
        "type": "http request",
        "z": "e460c767811fd1fc",
        "name": "Algolia Vendure Products",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "https://A4HOSBA5EQ-dsn.algolia.net/1/indexes/productsAEMB",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-Algolia-API-Key",
                "valueType": "other",
                "valueValue": "ff92af83e8780d396fc3c31640d5c670"
            },
            {
                "keyType": "other",
                "keyValue": "X-Algolia-Application-Id",
                "valueType": "other",
                "valueValue": "99W5FLUTWP"
            }
        ],
        "x": 500,
        "y": 160,
        "wires": [
            [
                "4678f3e5913c1dcc"
            ]
        ]
    },
    {
        "id": "4678f3e5913c1dcc",
        "type": "http response",
        "z": "e460c767811fd1fc",
        "name": "Algolia Shopify Products",
        "statusCode": "",
        "headers": {},
        "x": 760,
        "y": 160,
        "wires": []
    }
]